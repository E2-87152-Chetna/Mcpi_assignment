
based_adc_reading_blinkLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f48  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080010d8  080010d8  000020d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001118  08001118  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001118  08001118  00002118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001120  08001120  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001120  08001120  00002120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001124  08001124  00002124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001128  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000173a  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000074d  00000000  00000000  000047b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00004f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000dc  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001945c  00000000  00000000  00005134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e11  00000000  00000000  0001e590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bda0  00000000  00000000  000203a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ac141  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000870  00000000  00000000  000ac184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000ac9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005d  00000000  00000000  000aca13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080010c0 	.word	0x080010c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	080010c0 	.word	0x080010c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ADC_Init>:

#include "adc.h"

// Sensor --> Channel 0 i.e. PA.0

void ADC_Init(void) {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	//1. Enable GPIO peripheral clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000274:	4b17      	ldr	r3, [pc, #92]	@ (80002d4 <ADC_Init+0x64>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000278:	4a16      	ldr	r2, [pc, #88]	@ (80002d4 <ADC_Init+0x64>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6313      	str	r3, [r2, #48]	@ 0x30
	//2. Configure GPIO pin as analog mode (MODER = 0b11).
	GPIOA->MODER |= BV(0*2) | BV(0*2+1);
 8000280:	4b15      	ldr	r3, [pc, #84]	@ (80002d8 <ADC_Init+0x68>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a14      	ldr	r2, [pc, #80]	@ (80002d8 <ADC_Init+0x68>)
 8000286:	f043 0303 	orr.w	r3, r3, #3
 800028a:	6013      	str	r3, [r2, #0]
	//3. Enable ADC peripheral clock
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800028c:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <ADC_Init+0x64>)
 800028e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000290:	4a10      	ldr	r2, [pc, #64]	@ (80002d4 <ADC_Init+0x64>)
 8000292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000296:	6453      	str	r3, [r2, #68]	@ 0x44
	//4. Set ADC resolution as 12-bits (CR1 RES = 0b00).
	ADC1->CR1 &= ~(ADC_CR1_RES_0 | ADC_CR1_RES_1);
 8000298:	4b10      	ldr	r3, [pc, #64]	@ (80002dc <ADC_Init+0x6c>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4a0f      	ldr	r2, [pc, #60]	@ (80002dc <ADC_Init+0x6c>)
 800029e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80002a2:	6053      	str	r3, [r2, #4]
	//5. Enable single conversion (CR2 CONT = 0b0)
	ADC1->CR2 &= ~ADC_CR2_CONT;
 80002a4:	4b0d      	ldr	r3, [pc, #52]	@ (80002dc <ADC_Init+0x6c>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a0c      	ldr	r2, [pc, #48]	@ (80002dc <ADC_Init+0x6c>)
 80002aa:	f023 0302 	bic.w	r3, r3, #2
 80002ae:	6093      	str	r3, [r2, #8]
	//6. Set number of conversions in a sequence (SQR1 L(3:0) = 0b0000 for 1 conversion)
	ADC1->SQR1 |= (0 << ADC_SQR1_L_Pos);
 80002b0:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <ADC_Init+0x6c>)
 80002b2:	4a0a      	ldr	r2, [pc, #40]	@ (80002dc <ADC_Init+0x6c>)
 80002b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
	//7. Set channel number for conversions in sequence (e.g. SQR3 (4:0) = 0b00000 for channel 0).
	ADC1->SQR3 |= (0 << ADC_SQR3_SQ1_Pos);
 80002b8:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <ADC_Init+0x6c>)
 80002ba:	4a08      	ldr	r2, [pc, #32]	@ (80002dc <ADC_Init+0x6c>)
 80002bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002be:	6353      	str	r3, [r2, #52]	@ 0x34
	//8. Enable ADC (CR2 ADON=0b1)
	ADC1->CR2 |= ADC_CR2_ADON;
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <ADC_Init+0x6c>)
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4a05      	ldr	r2, [pc, #20]	@ (80002dc <ADC_Init+0x6c>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6093      	str	r3, [r2, #8]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020000 	.word	0x40020000
 80002dc:	40012000 	.word	0x40012000

080002e0 <ADC_GetValue>:

uint16_t ADC_GetValue(void) {
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
	//1. Start the conversion (CR2 SWSTART)
	ADC1->CR2 |= ADC_CR2_SWSTART;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000314 <ADC_GetValue+0x34>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <ADC_GetValue+0x34>)
 80002ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002f0:	6093      	str	r3, [r2, #8]
	//2. Wait for end of conversion (SR EOC bit)
	while(!(ADC1->SR & ADC_SR_EOC));
 80002f2:	bf00      	nop
 80002f4:	4b07      	ldr	r3, [pc, #28]	@ (8000314 <ADC_GetValue+0x34>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0302 	and.w	r3, r3, #2
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d0f9      	beq.n	80002f4 <ADC_GetValue+0x14>
	//3. Read ADC data register (DR)
	uint16_t val = ADC1->DR;
 8000300:	4b04      	ldr	r3, [pc, #16]	@ (8000314 <ADC_GetValue+0x34>)
 8000302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000304:	80fb      	strh	r3, [r7, #6]
	return val;
 8000306:	88fb      	ldrh	r3, [r7, #6]
}
 8000308:	4618      	mov	r0, r3
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40012000 	.word	0x40012000

08000318 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000320:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <DelayMs+0x44>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000326:	4b0e      	ldr	r3, [pc, #56]	@ (8000360 <DelayMs+0x48>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a0e      	ldr	r2, [pc, #56]	@ (8000364 <DelayMs+0x4c>)
 800032c:	fba2 2303 	umull	r2, r3, r2, r3
 8000330:	099b      	lsrs	r3, r3, #6
 8000332:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	68ba      	ldr	r2, [r7, #8]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800033e:	bf00      	nop
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <DelayMs+0x44>)
 8000342:	685a      	ldr	r2, [r3, #4]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	1ad2      	subs	r2, r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	429a      	cmp	r2, r3
 800034c:	d3f8      	bcc.n	8000340 <DelayMs+0x28>
}
 800034e:	bf00      	nop
 8000350:	bf00      	nop
 8000352:	3714      	adds	r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	e0001000 	.word	0xe0001000
 8000360:	20000000 	.word	0x20000000
 8000364:	10624dd3 	.word	0x10624dd3

08000368 <LedInit>:
Date: Sep 19, 2024
*/

#include "led.h"

void LedInit(uint32_t pin) {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	// enable GPIOD clock -- RCC AHB1ENR[GPIO_CLKEN] = 1
	RCC->AHB1ENR |= BV(GPIO_LED_CLKEN);
 8000370:	4b28      	ldr	r3, [pc, #160]	@ (8000414 <LedInit+0xac>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000374:	4a27      	ldr	r2, [pc, #156]	@ (8000414 <LedInit+0xac>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6313      	str	r3, [r2, #48]	@ 0x30
	// config GPIOD.pin as output -- MODER[2*pin+1:2*pin] - 01
	GPIO_LED->MODER &= ~BV(pin*2+1);
 800037c:	4b26      	ldr	r3, [pc, #152]	@ (8000418 <LedInit+0xb0>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	0052      	lsls	r2, r2, #1
 8000384:	3201      	adds	r2, #1
 8000386:	2101      	movs	r1, #1
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	43d2      	mvns	r2, r2
 800038e:	4611      	mov	r1, r2
 8000390:	4a21      	ldr	r2, [pc, #132]	@ (8000418 <LedInit+0xb0>)
 8000392:	400b      	ands	r3, r1
 8000394:	6013      	str	r3, [r2, #0]
	GPIO_LED->MODER |= BV(pin*2);
 8000396:	4b20      	ldr	r3, [pc, #128]	@ (8000418 <LedInit+0xb0>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	0052      	lsls	r2, r2, #1
 800039e:	2101      	movs	r1, #1
 80003a0:	fa01 f202 	lsl.w	r2, r1, r2
 80003a4:	4611      	mov	r1, r2
 80003a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000418 <LedInit+0xb0>)
 80003a8:	430b      	orrs	r3, r1
 80003aa:	6013      	str	r3, [r2, #0]
	// config GPIOD.pin as pushpull -- OTYPER[pin] - 0
	GPIO_LED->OTYPER &= ~BV(pin);
 80003ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000418 <LedInit+0xb0>)
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	2101      	movs	r1, #1
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	fa01 f202 	lsl.w	r2, r1, r2
 80003b8:	43d2      	mvns	r2, r2
 80003ba:	4611      	mov	r1, r2
 80003bc:	4a16      	ldr	r2, [pc, #88]	@ (8000418 <LedInit+0xb0>)
 80003be:	400b      	ands	r3, r1
 80003c0:	6053      	str	r3, [r2, #4]
	// config GPIOD.pin as low-speed -- OSPEEDR[2*pin+1:2*pin] - 00
	GPIO_LED->OSPEEDR &= ~(BV(pin*2+1) | BV(pin*2));
 80003c2:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <LedInit+0xb0>)
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	0052      	lsls	r2, r2, #1
 80003ca:	3201      	adds	r2, #1
 80003cc:	2101      	movs	r1, #1
 80003ce:	4091      	lsls	r1, r2
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	0052      	lsls	r2, r2, #1
 80003d4:	2001      	movs	r0, #1
 80003d6:	fa00 f202 	lsl.w	r2, r0, r2
 80003da:	430a      	orrs	r2, r1
 80003dc:	43d2      	mvns	r2, r2
 80003de:	4611      	mov	r1, r2
 80003e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000418 <LedInit+0xb0>)
 80003e2:	400b      	ands	r3, r1
 80003e4:	6093      	str	r3, [r2, #8]
	// config GPIOD.pin with no pullup & pulldown resistor PUPDR[2*pin+1:2*pin] -- 00
	GPIO_LED->PUPDR &= ~(BV(pin*2+1) | BV(pin*2));
 80003e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <LedInit+0xb0>)
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	0052      	lsls	r2, r2, #1
 80003ee:	3201      	adds	r2, #1
 80003f0:	2101      	movs	r1, #1
 80003f2:	4091      	lsls	r1, r2
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	2001      	movs	r0, #1
 80003fa:	fa00 f202 	lsl.w	r2, r0, r2
 80003fe:	430a      	orrs	r2, r1
 8000400:	43d2      	mvns	r2, r2
 8000402:	4611      	mov	r1, r2
 8000404:	4a04      	ldr	r2, [pc, #16]	@ (8000418 <LedInit+0xb0>)
 8000406:	400b      	ands	r3, r1
 8000408:	60d3      	str	r3, [r2, #12]
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	40023800 	.word	0x40023800
 8000418:	40020c00 	.word	0x40020c00

0800041c <LedOn>:

void LedOn(uint32_t pin) {
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 1
	GPIO_LED->ODR |= BV(pin);
 8000424:	4b07      	ldr	r3, [pc, #28]	@ (8000444 <LedOn+0x28>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	2101      	movs	r1, #1
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	fa01 f202 	lsl.w	r2, r1, r2
 8000430:	4611      	mov	r1, r2
 8000432:	4a04      	ldr	r2, [pc, #16]	@ (8000444 <LedOn+0x28>)
 8000434:	430b      	orrs	r3, r1
 8000436:	6153      	str	r3, [r2, #20]
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40020c00 	.word	0x40020c00

08000448 <LedOff>:

void LedOff(uint32_t pin) {
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 0
	GPIO_LED->ODR &= ~BV(pin);
 8000450:	4b07      	ldr	r3, [pc, #28]	@ (8000470 <LedOff+0x28>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	2101      	movs	r1, #1
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	43d2      	mvns	r2, r2
 800045e:	4611      	mov	r1, r2
 8000460:	4a03      	ldr	r2, [pc, #12]	@ (8000470 <LedOff+0x28>)
 8000462:	400b      	ands	r3, r1
 8000464:	6153      	str	r3, [r2, #20]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40020c00 	.word	0x40020c00

08000474 <LedBlink>:

void LedBlink(uint32_t pin, uint32_t delayMs) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	LedOn(pin);
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f7ff ffcc 	bl	800041c <LedOn>
	DelayMs(delayMs);
 8000484:	6838      	ldr	r0, [r7, #0]
 8000486:	f7ff ff47 	bl	8000318 <DelayMs>
	LedOff(pin);
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f7ff ffdc 	bl	8000448 <LedOff>
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80004a0:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <DelayMs+0x44>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80004a6:	4b0e      	ldr	r3, [pc, #56]	@ (80004e0 <DelayMs+0x48>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a0e      	ldr	r2, [pc, #56]	@ (80004e4 <DelayMs+0x4c>)
 80004ac:	fba2 2303 	umull	r2, r3, r2, r3
 80004b0:	099b      	lsrs	r3, r3, #6
 80004b2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	68ba      	ldr	r2, [r7, #8]
 80004b8:	fb02 f303 	mul.w	r3, r2, r3
 80004bc:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80004be:	bf00      	nop
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <DelayMs+0x44>)
 80004c2:	685a      	ldr	r2, [r3, #4]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	1ad2      	subs	r2, r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d3f8      	bcc.n	80004c0 <DelayMs+0x28>
}
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e0001000 	.word	0xe0001000
 80004e0:	20000000 	.word	0x20000000
 80004e4:	10624dd3 	.word	0x10624dd3

080004e8 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	@ 0x28
 80004ec:	af00      	add	r7, sp, #0
	uint16_t val;
	char str[32];
	SystemInit();
 80004ee:	f000 f859 	bl	80005a4 <SystemInit>
	ADC_Init();
 80004f2:	f7ff febd 	bl	8000270 <ADC_Init>
	LedInit(LED_RED_PIN);
 80004f6:	200e      	movs	r0, #14
 80004f8:	f7ff ff36 	bl	8000368 <LedInit>
	UartInit(9600);
 80004fc:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000500:	f000 f886 	bl	8000610 <UartInit>
	while(1) {
		LedBlink(LED_RED_PIN,100);
 8000504:	2164      	movs	r1, #100	@ 0x64
 8000506:	200e      	movs	r0, #14
 8000508:	f7ff ffb4 	bl	8000474 <LedBlink>
		val = ADC_GetValue();
 800050c:	f7ff fee8 	bl	80002e0 <ADC_GetValue>
 8000510:	4603      	mov	r3, r0
 8000512:	84fb      	strh	r3, [r7, #38]	@ 0x26
		sprintf(str, "ADC = %u\r\n", val);
 8000514:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	4906      	ldr	r1, [pc, #24]	@ (8000534 <main+0x4c>)
 800051a:	4618      	mov	r0, r3
 800051c:	f000 f938 	bl	8000790 <siprintf>
		UartPuts(str);
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f8ee 	bl	8000704 <UartPuts>
		DelayMs(1000);
 8000528:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800052c:	f7ff ffb4 	bl	8000498 <DelayMs>
		LedBlink(LED_RED_PIN,100);
 8000530:	bf00      	nop
 8000532:	e7e7      	b.n	8000504 <main+0x1c>
 8000534:	080010d8 	.word	0x080010d8

08000538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000540:	4a14      	ldr	r2, [pc, #80]	@ (8000594 <_sbrk+0x5c>)
 8000542:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <_sbrk+0x60>)
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800054c:	4b13      	ldr	r3, [pc, #76]	@ (800059c <_sbrk+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d102      	bne.n	800055a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000554:	4b11      	ldr	r3, [pc, #68]	@ (800059c <_sbrk+0x64>)
 8000556:	4a12      	ldr	r2, [pc, #72]	@ (80005a0 <_sbrk+0x68>)
 8000558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800055a:	4b10      	ldr	r3, [pc, #64]	@ (800059c <_sbrk+0x64>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	693a      	ldr	r2, [r7, #16]
 8000564:	429a      	cmp	r2, r3
 8000566:	d207      	bcs.n	8000578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000568:	f000 f932 	bl	80007d0 <__errno>
 800056c:	4603      	mov	r3, r0
 800056e:	220c      	movs	r2, #12
 8000570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000572:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000576:	e009      	b.n	800058c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000578:	4b08      	ldr	r3, [pc, #32]	@ (800059c <_sbrk+0x64>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800057e:	4b07      	ldr	r3, [pc, #28]	@ (800059c <_sbrk+0x64>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	4a05      	ldr	r2, [pc, #20]	@ (800059c <_sbrk+0x64>)
 8000588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20020000 	.word	0x20020000
 8000598:	00000400 	.word	0x00000400
 800059c:	20000070 	.word	0x20000070
 80005a0:	200001c0 	.word	0x200001c0

080005a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  DWT_Init();
 80005a8:	f000 f802 	bl	80005b0 <DWT_Init>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80005b4:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <DWT_Init+0x58>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4a13      	ldr	r2, [pc, #76]	@ (8000608 <DWT_Init+0x58>)
 80005ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005be:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <DWT_Init+0x58>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	4a10      	ldr	r2, [pc, #64]	@ (8000608 <DWT_Init+0x58>)
 80005c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ca:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <DWT_Init+0x5c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0e      	ldr	r2, [pc, #56]	@ (800060c <DWT_Init+0x5c>)
 80005d2:	f023 0301 	bic.w	r3, r3, #1
 80005d6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <DWT_Init+0x5c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0b      	ldr	r2, [pc, #44]	@ (800060c <DWT_Init+0x5c>)
 80005de:	f043 0301 	orr.w	r3, r3, #1
 80005e2:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <DWT_Init+0x5c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005ea:	bf00      	nop
    __ASM volatile ("NOP");
 80005ec:	bf00      	nop
    __ASM volatile ("NOP");
 80005ee:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <DWT_Init+0x5c>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf0c      	ite	eq
 80005f8:	2301      	moveq	r3, #1
 80005fa:	2300      	movne	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000edf0 	.word	0xe000edf0
 800060c:	e0001000 	.word	0xe0001000

08000610 <UartInit>:
Date: Sep 23, 2024
*/

#include "uart.h"

void UartInit(uint32_t baud) {
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	// enable gpio clock -- AHB1ENR.0
	RCC->AHB1ENR |= BV(GPIO_UART_CLKEN);
 8000618:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <UartInit+0xb8>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061c:	4a2a      	ldr	r2, [pc, #168]	@ (80006c8 <UartInit+0xb8>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pins to alt fn 7 (AF7) -- AFRL = 0111
	GPIO_UART->AFR[0] |= BV(14) | BV(13) | BV(12) | BV(10) | BV(9) | BV(8);
 8000624:	4b29      	ldr	r3, [pc, #164]	@ (80006cc <UartInit+0xbc>)
 8000626:	6a1b      	ldr	r3, [r3, #32]
 8000628:	4a28      	ldr	r2, [pc, #160]	@ (80006cc <UartInit+0xbc>)
 800062a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800062e:	6213      	str	r3, [r2, #32]
	GPIO_UART->AFR[0] &= ~(BV(15) | BV(11));
 8000630:	4b26      	ldr	r3, [pc, #152]	@ (80006cc <UartInit+0xbc>)
 8000632:	6a1b      	ldr	r3, [r3, #32]
 8000634:	4a25      	ldr	r2, [pc, #148]	@ (80006cc <UartInit+0xbc>)
 8000636:	f423 4308 	bic.w	r3, r3, #34816	@ 0x8800
 800063a:	6213      	str	r3, [r2, #32]
	// set gpio pins mode to alt fn	-- MODER = 10
	GPIO_UART->MODER &= ~(BV(UART_TX_PIN*2) | BV(UART_RX_PIN*2));
 800063c:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <UartInit+0xbc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a22      	ldr	r2, [pc, #136]	@ (80006cc <UartInit+0xbc>)
 8000642:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000646:	6013      	str	r3, [r2, #0]
	GPIO_UART->MODER |= (BV(UART_TX_PIN*2+1) | BV(UART_RX_PIN*2+1));
 8000648:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <UartInit+0xbc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1f      	ldr	r2, [pc, #124]	@ (80006cc <UartInit+0xbc>)
 800064e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000652:	6013      	str	r3, [r2, #0]

	// enable uart clock -- APB1ENR.17
	RCC->APB1ENR |= BV(UART_CLKEN);
 8000654:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <UartInit+0xb8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <UartInit+0xb8>)
 800065a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
	// enable transmission and reception on uart
	UART->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000660:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <UartInit+0xc0>)
 8000662:	220c      	movs	r2, #12
 8000664:	60da      	str	r2, [r3, #12]
	// set word length in CR1 -- M bit = 8-bit data len, Over8 = 0
	UART->CR1 &= ~(BV(USART_CR1_M_Pos) | BV(USART_CR1_OVER8_Pos));
 8000666:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <UartInit+0xc0>)
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	4a19      	ldr	r2, [pc, #100]	@ (80006d0 <UartInit+0xc0>)
 800066c:	f423 4310 	bic.w	r3, r3, #36864	@ 0x9000
 8000670:	60d3      	str	r3, [r2, #12]
	// set stop bits in CR2 -- 1 stop bit
	UART->CR2 &= ~(USART_CR2_STOP_0 | USART_CR2_STOP_1);
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <UartInit+0xc0>)
 8000674:	691b      	ldr	r3, [r3, #16]
 8000676:	4a16      	ldr	r2, [pc, #88]	@ (80006d0 <UartInit+0xc0>)
 8000678:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800067c:	6113      	str	r3, [r2, #16]
	// set baud rate -- UBRR
	if(baud == 9600)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000684:	d104      	bne.n	8000690 <UartInit+0x80>
		UART->BRR = UBRR_9600;
 8000686:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <UartInit+0xc0>)
 8000688:	f240 6283 	movw	r2, #1667	@ 0x683
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	e00f      	b.n	80006b0 <UartInit+0xa0>
	else if(baud == 38400)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000696:	d104      	bne.n	80006a2 <UartInit+0x92>
		UART->BRR = UBRR_38400;
 8000698:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <UartInit+0xc0>)
 800069a:	f240 12a1 	movw	r2, #417	@ 0x1a1
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	e006      	b.n	80006b0 <UartInit+0xa0>
	else if(baud == 115200)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80006a8:	d102      	bne.n	80006b0 <UartInit+0xa0>
			UART->BRR = UBRR_115200;
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <UartInit+0xc0>)
 80006ac:	228b      	movs	r2, #139	@ 0x8b
 80006ae:	609a      	str	r2, [r3, #8]
	// enable uart in CR1 -- UE bit
	UART->CR1 |= BV(USART_CR1_UE_Pos);
 80006b0:	4b07      	ldr	r3, [pc, #28]	@ (80006d0 <UartInit+0xc0>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	4a06      	ldr	r2, [pc, #24]	@ (80006d0 <UartInit+0xc0>)
 80006b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006ba:	60d3      	str	r3, [r2, #12]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40004400 	.word	0x40004400

080006d4 <UartPutch>:

void UartPutch(uint8_t ch) {
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	// write a byte in data register
	UART->DR = ch;
 80006de:	4a08      	ldr	r2, [pc, #32]	@ (8000700 <UartPutch+0x2c>)
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	6053      	str	r3, [r2, #4]
	// wait until TXE bit is 1 i.e. while TXE = 0
	while( (UART->SR & BV(USART_SR_TXE_Pos)) == 0)
 80006e4:	bf00      	nop
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <UartPutch+0x2c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f9      	beq.n	80006e6 <UartPutch+0x12>
		;
}
 80006f2:	bf00      	nop
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40004400 	.word	0x40004400

08000704 <UartPuts>:

void UartPuts(char str[]) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]!='\0'; i++)
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	e009      	b.n	8000726 <UartPuts+0x22>
		UartPutch((uint8_t)str[i]);
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ffda 	bl	80006d4 <UartPutch>
	for(int i=0; str[i]!='\0'; i++)
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	3301      	adds	r3, #1
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1ef      	bne.n	8000712 <UartPuts+0xe>
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800073c:	480d      	ldr	r0, [pc, #52]	@ (8000774 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000740:	f7ff ff30 	bl	80005a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480c      	ldr	r0, [pc, #48]	@ (8000778 <LoopForever+0x6>)
  ldr r1, =_edata
 8000746:	490d      	ldr	r1, [pc, #52]	@ (800077c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000748:	4a0d      	ldr	r2, [pc, #52]	@ (8000780 <LoopForever+0xe>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800075c:	4c0a      	ldr	r4, [pc, #40]	@ (8000788 <LoopForever+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800076a:	f000 f837 	bl	80007dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076e:	f7ff febb 	bl	80004e8 <main>

08000772 <LoopForever>:

LoopForever:
  b LoopForever
 8000772:	e7fe      	b.n	8000772 <LoopForever>
  ldr   r0, =_estack
 8000774:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800077c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000780:	08001128 	.word	0x08001128
  ldr r2, =_sbss
 8000784:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000788:	200001bc 	.word	0x200001bc

0800078c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800078c:	e7fe      	b.n	800078c <ADC_IRQHandler>
	...

08000790 <siprintf>:
 8000790:	b40e      	push	{r1, r2, r3}
 8000792:	b500      	push	{lr}
 8000794:	b09c      	sub	sp, #112	@ 0x70
 8000796:	ab1d      	add	r3, sp, #116	@ 0x74
 8000798:	9002      	str	r0, [sp, #8]
 800079a:	9006      	str	r0, [sp, #24]
 800079c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80007a0:	4809      	ldr	r0, [pc, #36]	@ (80007c8 <siprintf+0x38>)
 80007a2:	9107      	str	r1, [sp, #28]
 80007a4:	9104      	str	r1, [sp, #16]
 80007a6:	4909      	ldr	r1, [pc, #36]	@ (80007cc <siprintf+0x3c>)
 80007a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80007ac:	9105      	str	r1, [sp, #20]
 80007ae:	6800      	ldr	r0, [r0, #0]
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	a902      	add	r1, sp, #8
 80007b4:	f000 f98c 	bl	8000ad0 <_svfiprintf_r>
 80007b8:	9b02      	ldr	r3, [sp, #8]
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
 80007be:	b01c      	add	sp, #112	@ 0x70
 80007c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80007c4:	b003      	add	sp, #12
 80007c6:	4770      	bx	lr
 80007c8:	20000004 	.word	0x20000004
 80007cc:	ffff0208 	.word	0xffff0208

080007d0 <__errno>:
 80007d0:	4b01      	ldr	r3, [pc, #4]	@ (80007d8 <__errno+0x8>)
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000004 	.word	0x20000004

080007dc <__libc_init_array>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	4d0d      	ldr	r5, [pc, #52]	@ (8000814 <__libc_init_array+0x38>)
 80007e0:	4c0d      	ldr	r4, [pc, #52]	@ (8000818 <__libc_init_array+0x3c>)
 80007e2:	1b64      	subs	r4, r4, r5
 80007e4:	10a4      	asrs	r4, r4, #2
 80007e6:	2600      	movs	r6, #0
 80007e8:	42a6      	cmp	r6, r4
 80007ea:	d109      	bne.n	8000800 <__libc_init_array+0x24>
 80007ec:	4d0b      	ldr	r5, [pc, #44]	@ (800081c <__libc_init_array+0x40>)
 80007ee:	4c0c      	ldr	r4, [pc, #48]	@ (8000820 <__libc_init_array+0x44>)
 80007f0:	f000 fc66 	bl	80010c0 <_init>
 80007f4:	1b64      	subs	r4, r4, r5
 80007f6:	10a4      	asrs	r4, r4, #2
 80007f8:	2600      	movs	r6, #0
 80007fa:	42a6      	cmp	r6, r4
 80007fc:	d105      	bne.n	800080a <__libc_init_array+0x2e>
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
 8000800:	f855 3b04 	ldr.w	r3, [r5], #4
 8000804:	4798      	blx	r3
 8000806:	3601      	adds	r6, #1
 8000808:	e7ee      	b.n	80007e8 <__libc_init_array+0xc>
 800080a:	f855 3b04 	ldr.w	r3, [r5], #4
 800080e:	4798      	blx	r3
 8000810:	3601      	adds	r6, #1
 8000812:	e7f2      	b.n	80007fa <__libc_init_array+0x1e>
 8000814:	08001120 	.word	0x08001120
 8000818:	08001120 	.word	0x08001120
 800081c:	08001120 	.word	0x08001120
 8000820:	08001124 	.word	0x08001124

08000824 <__retarget_lock_acquire_recursive>:
 8000824:	4770      	bx	lr

08000826 <__retarget_lock_release_recursive>:
 8000826:	4770      	bx	lr

08000828 <_free_r>:
 8000828:	b538      	push	{r3, r4, r5, lr}
 800082a:	4605      	mov	r5, r0
 800082c:	2900      	cmp	r1, #0
 800082e:	d041      	beq.n	80008b4 <_free_r+0x8c>
 8000830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000834:	1f0c      	subs	r4, r1, #4
 8000836:	2b00      	cmp	r3, #0
 8000838:	bfb8      	it	lt
 800083a:	18e4      	addlt	r4, r4, r3
 800083c:	f000 f8e0 	bl	8000a00 <__malloc_lock>
 8000840:	4a1d      	ldr	r2, [pc, #116]	@ (80008b8 <_free_r+0x90>)
 8000842:	6813      	ldr	r3, [r2, #0]
 8000844:	b933      	cbnz	r3, 8000854 <_free_r+0x2c>
 8000846:	6063      	str	r3, [r4, #4]
 8000848:	6014      	str	r4, [r2, #0]
 800084a:	4628      	mov	r0, r5
 800084c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000850:	f000 b8dc 	b.w	8000a0c <__malloc_unlock>
 8000854:	42a3      	cmp	r3, r4
 8000856:	d908      	bls.n	800086a <_free_r+0x42>
 8000858:	6820      	ldr	r0, [r4, #0]
 800085a:	1821      	adds	r1, r4, r0
 800085c:	428b      	cmp	r3, r1
 800085e:	bf01      	itttt	eq
 8000860:	6819      	ldreq	r1, [r3, #0]
 8000862:	685b      	ldreq	r3, [r3, #4]
 8000864:	1809      	addeq	r1, r1, r0
 8000866:	6021      	streq	r1, [r4, #0]
 8000868:	e7ed      	b.n	8000846 <_free_r+0x1e>
 800086a:	461a      	mov	r2, r3
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	b10b      	cbz	r3, 8000874 <_free_r+0x4c>
 8000870:	42a3      	cmp	r3, r4
 8000872:	d9fa      	bls.n	800086a <_free_r+0x42>
 8000874:	6811      	ldr	r1, [r2, #0]
 8000876:	1850      	adds	r0, r2, r1
 8000878:	42a0      	cmp	r0, r4
 800087a:	d10b      	bne.n	8000894 <_free_r+0x6c>
 800087c:	6820      	ldr	r0, [r4, #0]
 800087e:	4401      	add	r1, r0
 8000880:	1850      	adds	r0, r2, r1
 8000882:	4283      	cmp	r3, r0
 8000884:	6011      	str	r1, [r2, #0]
 8000886:	d1e0      	bne.n	800084a <_free_r+0x22>
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	6053      	str	r3, [r2, #4]
 800088e:	4408      	add	r0, r1
 8000890:	6010      	str	r0, [r2, #0]
 8000892:	e7da      	b.n	800084a <_free_r+0x22>
 8000894:	d902      	bls.n	800089c <_free_r+0x74>
 8000896:	230c      	movs	r3, #12
 8000898:	602b      	str	r3, [r5, #0]
 800089a:	e7d6      	b.n	800084a <_free_r+0x22>
 800089c:	6820      	ldr	r0, [r4, #0]
 800089e:	1821      	adds	r1, r4, r0
 80008a0:	428b      	cmp	r3, r1
 80008a2:	bf04      	itt	eq
 80008a4:	6819      	ldreq	r1, [r3, #0]
 80008a6:	685b      	ldreq	r3, [r3, #4]
 80008a8:	6063      	str	r3, [r4, #4]
 80008aa:	bf04      	itt	eq
 80008ac:	1809      	addeq	r1, r1, r0
 80008ae:	6021      	streq	r1, [r4, #0]
 80008b0:	6054      	str	r4, [r2, #4]
 80008b2:	e7ca      	b.n	800084a <_free_r+0x22>
 80008b4:	bd38      	pop	{r3, r4, r5, pc}
 80008b6:	bf00      	nop
 80008b8:	200001b8 	.word	0x200001b8

080008bc <sbrk_aligned>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	4e0f      	ldr	r6, [pc, #60]	@ (80008fc <sbrk_aligned+0x40>)
 80008c0:	460c      	mov	r4, r1
 80008c2:	6831      	ldr	r1, [r6, #0]
 80008c4:	4605      	mov	r5, r0
 80008c6:	b911      	cbnz	r1, 80008ce <sbrk_aligned+0x12>
 80008c8:	f000 fba6 	bl	8001018 <_sbrk_r>
 80008cc:	6030      	str	r0, [r6, #0]
 80008ce:	4621      	mov	r1, r4
 80008d0:	4628      	mov	r0, r5
 80008d2:	f000 fba1 	bl	8001018 <_sbrk_r>
 80008d6:	1c43      	adds	r3, r0, #1
 80008d8:	d103      	bne.n	80008e2 <sbrk_aligned+0x26>
 80008da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80008de:	4620      	mov	r0, r4
 80008e0:	bd70      	pop	{r4, r5, r6, pc}
 80008e2:	1cc4      	adds	r4, r0, #3
 80008e4:	f024 0403 	bic.w	r4, r4, #3
 80008e8:	42a0      	cmp	r0, r4
 80008ea:	d0f8      	beq.n	80008de <sbrk_aligned+0x22>
 80008ec:	1a21      	subs	r1, r4, r0
 80008ee:	4628      	mov	r0, r5
 80008f0:	f000 fb92 	bl	8001018 <_sbrk_r>
 80008f4:	3001      	adds	r0, #1
 80008f6:	d1f2      	bne.n	80008de <sbrk_aligned+0x22>
 80008f8:	e7ef      	b.n	80008da <sbrk_aligned+0x1e>
 80008fa:	bf00      	nop
 80008fc:	200001b4 	.word	0x200001b4

08000900 <_malloc_r>:
 8000900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000904:	1ccd      	adds	r5, r1, #3
 8000906:	f025 0503 	bic.w	r5, r5, #3
 800090a:	3508      	adds	r5, #8
 800090c:	2d0c      	cmp	r5, #12
 800090e:	bf38      	it	cc
 8000910:	250c      	movcc	r5, #12
 8000912:	2d00      	cmp	r5, #0
 8000914:	4606      	mov	r6, r0
 8000916:	db01      	blt.n	800091c <_malloc_r+0x1c>
 8000918:	42a9      	cmp	r1, r5
 800091a:	d904      	bls.n	8000926 <_malloc_r+0x26>
 800091c:	230c      	movs	r3, #12
 800091e:	6033      	str	r3, [r6, #0]
 8000920:	2000      	movs	r0, #0
 8000922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80009fc <_malloc_r+0xfc>
 800092a:	f000 f869 	bl	8000a00 <__malloc_lock>
 800092e:	f8d8 3000 	ldr.w	r3, [r8]
 8000932:	461c      	mov	r4, r3
 8000934:	bb44      	cbnz	r4, 8000988 <_malloc_r+0x88>
 8000936:	4629      	mov	r1, r5
 8000938:	4630      	mov	r0, r6
 800093a:	f7ff ffbf 	bl	80008bc <sbrk_aligned>
 800093e:	1c43      	adds	r3, r0, #1
 8000940:	4604      	mov	r4, r0
 8000942:	d158      	bne.n	80009f6 <_malloc_r+0xf6>
 8000944:	f8d8 4000 	ldr.w	r4, [r8]
 8000948:	4627      	mov	r7, r4
 800094a:	2f00      	cmp	r7, #0
 800094c:	d143      	bne.n	80009d6 <_malloc_r+0xd6>
 800094e:	2c00      	cmp	r4, #0
 8000950:	d04b      	beq.n	80009ea <_malloc_r+0xea>
 8000952:	6823      	ldr	r3, [r4, #0]
 8000954:	4639      	mov	r1, r7
 8000956:	4630      	mov	r0, r6
 8000958:	eb04 0903 	add.w	r9, r4, r3
 800095c:	f000 fb5c 	bl	8001018 <_sbrk_r>
 8000960:	4581      	cmp	r9, r0
 8000962:	d142      	bne.n	80009ea <_malloc_r+0xea>
 8000964:	6821      	ldr	r1, [r4, #0]
 8000966:	1a6d      	subs	r5, r5, r1
 8000968:	4629      	mov	r1, r5
 800096a:	4630      	mov	r0, r6
 800096c:	f7ff ffa6 	bl	80008bc <sbrk_aligned>
 8000970:	3001      	adds	r0, #1
 8000972:	d03a      	beq.n	80009ea <_malloc_r+0xea>
 8000974:	6823      	ldr	r3, [r4, #0]
 8000976:	442b      	add	r3, r5
 8000978:	6023      	str	r3, [r4, #0]
 800097a:	f8d8 3000 	ldr.w	r3, [r8]
 800097e:	685a      	ldr	r2, [r3, #4]
 8000980:	bb62      	cbnz	r2, 80009dc <_malloc_r+0xdc>
 8000982:	f8c8 7000 	str.w	r7, [r8]
 8000986:	e00f      	b.n	80009a8 <_malloc_r+0xa8>
 8000988:	6822      	ldr	r2, [r4, #0]
 800098a:	1b52      	subs	r2, r2, r5
 800098c:	d420      	bmi.n	80009d0 <_malloc_r+0xd0>
 800098e:	2a0b      	cmp	r2, #11
 8000990:	d917      	bls.n	80009c2 <_malloc_r+0xc2>
 8000992:	1961      	adds	r1, r4, r5
 8000994:	42a3      	cmp	r3, r4
 8000996:	6025      	str	r5, [r4, #0]
 8000998:	bf18      	it	ne
 800099a:	6059      	strne	r1, [r3, #4]
 800099c:	6863      	ldr	r3, [r4, #4]
 800099e:	bf08      	it	eq
 80009a0:	f8c8 1000 	streq.w	r1, [r8]
 80009a4:	5162      	str	r2, [r4, r5]
 80009a6:	604b      	str	r3, [r1, #4]
 80009a8:	4630      	mov	r0, r6
 80009aa:	f000 f82f 	bl	8000a0c <__malloc_unlock>
 80009ae:	f104 000b 	add.w	r0, r4, #11
 80009b2:	1d23      	adds	r3, r4, #4
 80009b4:	f020 0007 	bic.w	r0, r0, #7
 80009b8:	1ac2      	subs	r2, r0, r3
 80009ba:	bf1c      	itt	ne
 80009bc:	1a1b      	subne	r3, r3, r0
 80009be:	50a3      	strne	r3, [r4, r2]
 80009c0:	e7af      	b.n	8000922 <_malloc_r+0x22>
 80009c2:	6862      	ldr	r2, [r4, #4]
 80009c4:	42a3      	cmp	r3, r4
 80009c6:	bf0c      	ite	eq
 80009c8:	f8c8 2000 	streq.w	r2, [r8]
 80009cc:	605a      	strne	r2, [r3, #4]
 80009ce:	e7eb      	b.n	80009a8 <_malloc_r+0xa8>
 80009d0:	4623      	mov	r3, r4
 80009d2:	6864      	ldr	r4, [r4, #4]
 80009d4:	e7ae      	b.n	8000934 <_malloc_r+0x34>
 80009d6:	463c      	mov	r4, r7
 80009d8:	687f      	ldr	r7, [r7, #4]
 80009da:	e7b6      	b.n	800094a <_malloc_r+0x4a>
 80009dc:	461a      	mov	r2, r3
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	42a3      	cmp	r3, r4
 80009e2:	d1fb      	bne.n	80009dc <_malloc_r+0xdc>
 80009e4:	2300      	movs	r3, #0
 80009e6:	6053      	str	r3, [r2, #4]
 80009e8:	e7de      	b.n	80009a8 <_malloc_r+0xa8>
 80009ea:	230c      	movs	r3, #12
 80009ec:	6033      	str	r3, [r6, #0]
 80009ee:	4630      	mov	r0, r6
 80009f0:	f000 f80c 	bl	8000a0c <__malloc_unlock>
 80009f4:	e794      	b.n	8000920 <_malloc_r+0x20>
 80009f6:	6005      	str	r5, [r0, #0]
 80009f8:	e7d6      	b.n	80009a8 <_malloc_r+0xa8>
 80009fa:	bf00      	nop
 80009fc:	200001b8 	.word	0x200001b8

08000a00 <__malloc_lock>:
 8000a00:	4801      	ldr	r0, [pc, #4]	@ (8000a08 <__malloc_lock+0x8>)
 8000a02:	f7ff bf0f 	b.w	8000824 <__retarget_lock_acquire_recursive>
 8000a06:	bf00      	nop
 8000a08:	200001b0 	.word	0x200001b0

08000a0c <__malloc_unlock>:
 8000a0c:	4801      	ldr	r0, [pc, #4]	@ (8000a14 <__malloc_unlock+0x8>)
 8000a0e:	f7ff bf0a 	b.w	8000826 <__retarget_lock_release_recursive>
 8000a12:	bf00      	nop
 8000a14:	200001b0 	.word	0x200001b0

08000a18 <__ssputs_r>:
 8000a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a1c:	688e      	ldr	r6, [r1, #8]
 8000a1e:	461f      	mov	r7, r3
 8000a20:	42be      	cmp	r6, r7
 8000a22:	680b      	ldr	r3, [r1, #0]
 8000a24:	4682      	mov	sl, r0
 8000a26:	460c      	mov	r4, r1
 8000a28:	4690      	mov	r8, r2
 8000a2a:	d82d      	bhi.n	8000a88 <__ssputs_r+0x70>
 8000a2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000a34:	d026      	beq.n	8000a84 <__ssputs_r+0x6c>
 8000a36:	6965      	ldr	r5, [r4, #20]
 8000a38:	6909      	ldr	r1, [r1, #16]
 8000a3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a3e:	eba3 0901 	sub.w	r9, r3, r1
 8000a42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a46:	1c7b      	adds	r3, r7, #1
 8000a48:	444b      	add	r3, r9
 8000a4a:	106d      	asrs	r5, r5, #1
 8000a4c:	429d      	cmp	r5, r3
 8000a4e:	bf38      	it	cc
 8000a50:	461d      	movcc	r5, r3
 8000a52:	0553      	lsls	r3, r2, #21
 8000a54:	d527      	bpl.n	8000aa6 <__ssputs_r+0x8e>
 8000a56:	4629      	mov	r1, r5
 8000a58:	f7ff ff52 	bl	8000900 <_malloc_r>
 8000a5c:	4606      	mov	r6, r0
 8000a5e:	b360      	cbz	r0, 8000aba <__ssputs_r+0xa2>
 8000a60:	6921      	ldr	r1, [r4, #16]
 8000a62:	464a      	mov	r2, r9
 8000a64:	f000 fae8 	bl	8001038 <memcpy>
 8000a68:	89a3      	ldrh	r3, [r4, #12]
 8000a6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a72:	81a3      	strh	r3, [r4, #12]
 8000a74:	6126      	str	r6, [r4, #16]
 8000a76:	6165      	str	r5, [r4, #20]
 8000a78:	444e      	add	r6, r9
 8000a7a:	eba5 0509 	sub.w	r5, r5, r9
 8000a7e:	6026      	str	r6, [r4, #0]
 8000a80:	60a5      	str	r5, [r4, #8]
 8000a82:	463e      	mov	r6, r7
 8000a84:	42be      	cmp	r6, r7
 8000a86:	d900      	bls.n	8000a8a <__ssputs_r+0x72>
 8000a88:	463e      	mov	r6, r7
 8000a8a:	6820      	ldr	r0, [r4, #0]
 8000a8c:	4632      	mov	r2, r6
 8000a8e:	4641      	mov	r1, r8
 8000a90:	f000 faa8 	bl	8000fe4 <memmove>
 8000a94:	68a3      	ldr	r3, [r4, #8]
 8000a96:	1b9b      	subs	r3, r3, r6
 8000a98:	60a3      	str	r3, [r4, #8]
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	4433      	add	r3, r6
 8000a9e:	6023      	str	r3, [r4, #0]
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	462a      	mov	r2, r5
 8000aa8:	f000 fad4 	bl	8001054 <_realloc_r>
 8000aac:	4606      	mov	r6, r0
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d1e0      	bne.n	8000a74 <__ssputs_r+0x5c>
 8000ab2:	6921      	ldr	r1, [r4, #16]
 8000ab4:	4650      	mov	r0, sl
 8000ab6:	f7ff feb7 	bl	8000828 <_free_r>
 8000aba:	230c      	movs	r3, #12
 8000abc:	f8ca 3000 	str.w	r3, [sl]
 8000ac0:	89a3      	ldrh	r3, [r4, #12]
 8000ac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ac6:	81a3      	strh	r3, [r4, #12]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000acc:	e7e9      	b.n	8000aa2 <__ssputs_r+0x8a>
	...

08000ad0 <_svfiprintf_r>:
 8000ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad4:	4698      	mov	r8, r3
 8000ad6:	898b      	ldrh	r3, [r1, #12]
 8000ad8:	061b      	lsls	r3, r3, #24
 8000ada:	b09d      	sub	sp, #116	@ 0x74
 8000adc:	4607      	mov	r7, r0
 8000ade:	460d      	mov	r5, r1
 8000ae0:	4614      	mov	r4, r2
 8000ae2:	d510      	bpl.n	8000b06 <_svfiprintf_r+0x36>
 8000ae4:	690b      	ldr	r3, [r1, #16]
 8000ae6:	b973      	cbnz	r3, 8000b06 <_svfiprintf_r+0x36>
 8000ae8:	2140      	movs	r1, #64	@ 0x40
 8000aea:	f7ff ff09 	bl	8000900 <_malloc_r>
 8000aee:	6028      	str	r0, [r5, #0]
 8000af0:	6128      	str	r0, [r5, #16]
 8000af2:	b930      	cbnz	r0, 8000b02 <_svfiprintf_r+0x32>
 8000af4:	230c      	movs	r3, #12
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000afc:	b01d      	add	sp, #116	@ 0x74
 8000afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b02:	2340      	movs	r3, #64	@ 0x40
 8000b04:	616b      	str	r3, [r5, #20]
 8000b06:	2300      	movs	r3, #0
 8000b08:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b14:	2330      	movs	r3, #48	@ 0x30
 8000b16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000cb4 <_svfiprintf_r+0x1e4>
 8000b1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b1e:	f04f 0901 	mov.w	r9, #1
 8000b22:	4623      	mov	r3, r4
 8000b24:	469a      	mov	sl, r3
 8000b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b2a:	b10a      	cbz	r2, 8000b30 <_svfiprintf_r+0x60>
 8000b2c:	2a25      	cmp	r2, #37	@ 0x25
 8000b2e:	d1f9      	bne.n	8000b24 <_svfiprintf_r+0x54>
 8000b30:	ebba 0b04 	subs.w	fp, sl, r4
 8000b34:	d00b      	beq.n	8000b4e <_svfiprintf_r+0x7e>
 8000b36:	465b      	mov	r3, fp
 8000b38:	4622      	mov	r2, r4
 8000b3a:	4629      	mov	r1, r5
 8000b3c:	4638      	mov	r0, r7
 8000b3e:	f7ff ff6b 	bl	8000a18 <__ssputs_r>
 8000b42:	3001      	adds	r0, #1
 8000b44:	f000 80a7 	beq.w	8000c96 <_svfiprintf_r+0x1c6>
 8000b48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b4a:	445a      	add	r2, fp
 8000b4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 809f 	beq.w	8000c96 <_svfiprintf_r+0x1c6>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b62:	f10a 0a01 	add.w	sl, sl, #1
 8000b66:	9304      	str	r3, [sp, #16]
 8000b68:	9307      	str	r3, [sp, #28]
 8000b6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b70:	4654      	mov	r4, sl
 8000b72:	2205      	movs	r2, #5
 8000b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b78:	484e      	ldr	r0, [pc, #312]	@ (8000cb4 <_svfiprintf_r+0x1e4>)
 8000b7a:	f7ff fb29 	bl	80001d0 <memchr>
 8000b7e:	9a04      	ldr	r2, [sp, #16]
 8000b80:	b9d8      	cbnz	r0, 8000bba <_svfiprintf_r+0xea>
 8000b82:	06d0      	lsls	r0, r2, #27
 8000b84:	bf44      	itt	mi
 8000b86:	2320      	movmi	r3, #32
 8000b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b8c:	0711      	lsls	r1, r2, #28
 8000b8e:	bf44      	itt	mi
 8000b90:	232b      	movmi	r3, #43	@ 0x2b
 8000b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b96:	f89a 3000 	ldrb.w	r3, [sl]
 8000b9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b9c:	d015      	beq.n	8000bca <_svfiprintf_r+0xfa>
 8000b9e:	9a07      	ldr	r2, [sp, #28]
 8000ba0:	4654      	mov	r4, sl
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f04f 0c0a 	mov.w	ip, #10
 8000ba8:	4621      	mov	r1, r4
 8000baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bae:	3b30      	subs	r3, #48	@ 0x30
 8000bb0:	2b09      	cmp	r3, #9
 8000bb2:	d94b      	bls.n	8000c4c <_svfiprintf_r+0x17c>
 8000bb4:	b1b0      	cbz	r0, 8000be4 <_svfiprintf_r+0x114>
 8000bb6:	9207      	str	r2, [sp, #28]
 8000bb8:	e014      	b.n	8000be4 <_svfiprintf_r+0x114>
 8000bba:	eba0 0308 	sub.w	r3, r0, r8
 8000bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	9304      	str	r3, [sp, #16]
 8000bc6:	46a2      	mov	sl, r4
 8000bc8:	e7d2      	b.n	8000b70 <_svfiprintf_r+0xa0>
 8000bca:	9b03      	ldr	r3, [sp, #12]
 8000bcc:	1d19      	adds	r1, r3, #4
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	9103      	str	r1, [sp, #12]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	bfbb      	ittet	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8000bdc:	9307      	strge	r3, [sp, #28]
 8000bde:	9307      	strlt	r3, [sp, #28]
 8000be0:	bfb8      	it	lt
 8000be2:	9204      	strlt	r2, [sp, #16]
 8000be4:	7823      	ldrb	r3, [r4, #0]
 8000be6:	2b2e      	cmp	r3, #46	@ 0x2e
 8000be8:	d10a      	bne.n	8000c00 <_svfiprintf_r+0x130>
 8000bea:	7863      	ldrb	r3, [r4, #1]
 8000bec:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bee:	d132      	bne.n	8000c56 <_svfiprintf_r+0x186>
 8000bf0:	9b03      	ldr	r3, [sp, #12]
 8000bf2:	1d1a      	adds	r2, r3, #4
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	9203      	str	r2, [sp, #12]
 8000bf8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000bfc:	3402      	adds	r4, #2
 8000bfe:	9305      	str	r3, [sp, #20]
 8000c00:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000cb8 <_svfiprintf_r+0x1e8>
 8000c04:	7821      	ldrb	r1, [r4, #0]
 8000c06:	2203      	movs	r2, #3
 8000c08:	4650      	mov	r0, sl
 8000c0a:	f7ff fae1 	bl	80001d0 <memchr>
 8000c0e:	b138      	cbz	r0, 8000c20 <_svfiprintf_r+0x150>
 8000c10:	9b04      	ldr	r3, [sp, #16]
 8000c12:	eba0 000a 	sub.w	r0, r0, sl
 8000c16:	2240      	movs	r2, #64	@ 0x40
 8000c18:	4082      	lsls	r2, r0
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	3401      	adds	r4, #1
 8000c1e:	9304      	str	r3, [sp, #16]
 8000c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c24:	4825      	ldr	r0, [pc, #148]	@ (8000cbc <_svfiprintf_r+0x1ec>)
 8000c26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c2a:	2206      	movs	r2, #6
 8000c2c:	f7ff fad0 	bl	80001d0 <memchr>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d036      	beq.n	8000ca2 <_svfiprintf_r+0x1d2>
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <_svfiprintf_r+0x1f0>)
 8000c36:	bb1b      	cbnz	r3, 8000c80 <_svfiprintf_r+0x1b0>
 8000c38:	9b03      	ldr	r3, [sp, #12]
 8000c3a:	3307      	adds	r3, #7
 8000c3c:	f023 0307 	bic.w	r3, r3, #7
 8000c40:	3308      	adds	r3, #8
 8000c42:	9303      	str	r3, [sp, #12]
 8000c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c46:	4433      	add	r3, r6
 8000c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c4a:	e76a      	b.n	8000b22 <_svfiprintf_r+0x52>
 8000c4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c50:	460c      	mov	r4, r1
 8000c52:	2001      	movs	r0, #1
 8000c54:	e7a8      	b.n	8000ba8 <_svfiprintf_r+0xd8>
 8000c56:	2300      	movs	r3, #0
 8000c58:	3401      	adds	r4, #1
 8000c5a:	9305      	str	r3, [sp, #20]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 0c0a 	mov.w	ip, #10
 8000c62:	4620      	mov	r0, r4
 8000c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c68:	3a30      	subs	r2, #48	@ 0x30
 8000c6a:	2a09      	cmp	r2, #9
 8000c6c:	d903      	bls.n	8000c76 <_svfiprintf_r+0x1a6>
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0c6      	beq.n	8000c00 <_svfiprintf_r+0x130>
 8000c72:	9105      	str	r1, [sp, #20]
 8000c74:	e7c4      	b.n	8000c00 <_svfiprintf_r+0x130>
 8000c76:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e7f0      	b.n	8000c62 <_svfiprintf_r+0x192>
 8000c80:	ab03      	add	r3, sp, #12
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	462a      	mov	r2, r5
 8000c86:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <_svfiprintf_r+0x1f4>)
 8000c88:	a904      	add	r1, sp, #16
 8000c8a:	4638      	mov	r0, r7
 8000c8c:	f3af 8000 	nop.w
 8000c90:	1c42      	adds	r2, r0, #1
 8000c92:	4606      	mov	r6, r0
 8000c94:	d1d6      	bne.n	8000c44 <_svfiprintf_r+0x174>
 8000c96:	89ab      	ldrh	r3, [r5, #12]
 8000c98:	065b      	lsls	r3, r3, #25
 8000c9a:	f53f af2d 	bmi.w	8000af8 <_svfiprintf_r+0x28>
 8000c9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ca0:	e72c      	b.n	8000afc <_svfiprintf_r+0x2c>
 8000ca2:	ab03      	add	r3, sp, #12
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	462a      	mov	r2, r5
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <_svfiprintf_r+0x1f4>)
 8000caa:	a904      	add	r1, sp, #16
 8000cac:	4638      	mov	r0, r7
 8000cae:	f000 f879 	bl	8000da4 <_printf_i>
 8000cb2:	e7ed      	b.n	8000c90 <_svfiprintf_r+0x1c0>
 8000cb4:	080010e3 	.word	0x080010e3
 8000cb8:	080010e9 	.word	0x080010e9
 8000cbc:	080010ed 	.word	0x080010ed
 8000cc0:	00000000 	.word	0x00000000
 8000cc4:	08000a19 	.word	0x08000a19

08000cc8 <_printf_common>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	4616      	mov	r6, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	688a      	ldr	r2, [r1, #8]
 8000cd2:	690b      	ldr	r3, [r1, #16]
 8000cd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	bfb8      	it	lt
 8000cdc:	4613      	movlt	r3, r2
 8000cde:	6033      	str	r3, [r6, #0]
 8000ce0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ce4:	4607      	mov	r7, r0
 8000ce6:	460c      	mov	r4, r1
 8000ce8:	b10a      	cbz	r2, 8000cee <_printf_common+0x26>
 8000cea:	3301      	adds	r3, #1
 8000cec:	6033      	str	r3, [r6, #0]
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	0699      	lsls	r1, r3, #26
 8000cf2:	bf42      	ittt	mi
 8000cf4:	6833      	ldrmi	r3, [r6, #0]
 8000cf6:	3302      	addmi	r3, #2
 8000cf8:	6033      	strmi	r3, [r6, #0]
 8000cfa:	6825      	ldr	r5, [r4, #0]
 8000cfc:	f015 0506 	ands.w	r5, r5, #6
 8000d00:	d106      	bne.n	8000d10 <_printf_common+0x48>
 8000d02:	f104 0a19 	add.w	sl, r4, #25
 8000d06:	68e3      	ldr	r3, [r4, #12]
 8000d08:	6832      	ldr	r2, [r6, #0]
 8000d0a:	1a9b      	subs	r3, r3, r2
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	dc26      	bgt.n	8000d5e <_printf_common+0x96>
 8000d10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d14:	6822      	ldr	r2, [r4, #0]
 8000d16:	3b00      	subs	r3, #0
 8000d18:	bf18      	it	ne
 8000d1a:	2301      	movne	r3, #1
 8000d1c:	0692      	lsls	r2, r2, #26
 8000d1e:	d42b      	bmi.n	8000d78 <_printf_common+0xb0>
 8000d20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d24:	4641      	mov	r1, r8
 8000d26:	4638      	mov	r0, r7
 8000d28:	47c8      	blx	r9
 8000d2a:	3001      	adds	r0, #1
 8000d2c:	d01e      	beq.n	8000d6c <_printf_common+0xa4>
 8000d2e:	6823      	ldr	r3, [r4, #0]
 8000d30:	6922      	ldr	r2, [r4, #16]
 8000d32:	f003 0306 	and.w	r3, r3, #6
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf02      	ittt	eq
 8000d3a:	68e5      	ldreq	r5, [r4, #12]
 8000d3c:	6833      	ldreq	r3, [r6, #0]
 8000d3e:	1aed      	subeq	r5, r5, r3
 8000d40:	68a3      	ldr	r3, [r4, #8]
 8000d42:	bf0c      	ite	eq
 8000d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d48:	2500      	movne	r5, #0
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	bfc4      	itt	gt
 8000d4e:	1a9b      	subgt	r3, r3, r2
 8000d50:	18ed      	addgt	r5, r5, r3
 8000d52:	2600      	movs	r6, #0
 8000d54:	341a      	adds	r4, #26
 8000d56:	42b5      	cmp	r5, r6
 8000d58:	d11a      	bne.n	8000d90 <_printf_common+0xc8>
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	e008      	b.n	8000d70 <_printf_common+0xa8>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	4652      	mov	r2, sl
 8000d62:	4641      	mov	r1, r8
 8000d64:	4638      	mov	r0, r7
 8000d66:	47c8      	blx	r9
 8000d68:	3001      	adds	r0, #1
 8000d6a:	d103      	bne.n	8000d74 <_printf_common+0xac>
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	3501      	adds	r5, #1
 8000d76:	e7c6      	b.n	8000d06 <_printf_common+0x3e>
 8000d78:	18e1      	adds	r1, r4, r3
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	2030      	movs	r0, #48	@ 0x30
 8000d7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d82:	4422      	add	r2, r4
 8000d84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	e7c7      	b.n	8000d20 <_printf_common+0x58>
 8000d90:	2301      	movs	r3, #1
 8000d92:	4622      	mov	r2, r4
 8000d94:	4641      	mov	r1, r8
 8000d96:	4638      	mov	r0, r7
 8000d98:	47c8      	blx	r9
 8000d9a:	3001      	adds	r0, #1
 8000d9c:	d0e6      	beq.n	8000d6c <_printf_common+0xa4>
 8000d9e:	3601      	adds	r6, #1
 8000da0:	e7d9      	b.n	8000d56 <_printf_common+0x8e>
	...

08000da4 <_printf_i>:
 8000da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	7e0f      	ldrb	r7, [r1, #24]
 8000daa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000dac:	2f78      	cmp	r7, #120	@ 0x78
 8000dae:	4691      	mov	r9, r2
 8000db0:	4680      	mov	r8, r0
 8000db2:	460c      	mov	r4, r1
 8000db4:	469a      	mov	sl, r3
 8000db6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000dba:	d807      	bhi.n	8000dcc <_printf_i+0x28>
 8000dbc:	2f62      	cmp	r7, #98	@ 0x62
 8000dbe:	d80a      	bhi.n	8000dd6 <_printf_i+0x32>
 8000dc0:	2f00      	cmp	r7, #0
 8000dc2:	f000 80d2 	beq.w	8000f6a <_printf_i+0x1c6>
 8000dc6:	2f58      	cmp	r7, #88	@ 0x58
 8000dc8:	f000 80b9 	beq.w	8000f3e <_printf_i+0x19a>
 8000dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000dd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000dd4:	e03a      	b.n	8000e4c <_printf_i+0xa8>
 8000dd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000dda:	2b15      	cmp	r3, #21
 8000ddc:	d8f6      	bhi.n	8000dcc <_printf_i+0x28>
 8000dde:	a101      	add	r1, pc, #4	@ (adr r1, 8000de4 <_printf_i+0x40>)
 8000de0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000de4:	08000e3d 	.word	0x08000e3d
 8000de8:	08000e51 	.word	0x08000e51
 8000dec:	08000dcd 	.word	0x08000dcd
 8000df0:	08000dcd 	.word	0x08000dcd
 8000df4:	08000dcd 	.word	0x08000dcd
 8000df8:	08000dcd 	.word	0x08000dcd
 8000dfc:	08000e51 	.word	0x08000e51
 8000e00:	08000dcd 	.word	0x08000dcd
 8000e04:	08000dcd 	.word	0x08000dcd
 8000e08:	08000dcd 	.word	0x08000dcd
 8000e0c:	08000dcd 	.word	0x08000dcd
 8000e10:	08000f51 	.word	0x08000f51
 8000e14:	08000e7b 	.word	0x08000e7b
 8000e18:	08000f0b 	.word	0x08000f0b
 8000e1c:	08000dcd 	.word	0x08000dcd
 8000e20:	08000dcd 	.word	0x08000dcd
 8000e24:	08000f73 	.word	0x08000f73
 8000e28:	08000dcd 	.word	0x08000dcd
 8000e2c:	08000e7b 	.word	0x08000e7b
 8000e30:	08000dcd 	.word	0x08000dcd
 8000e34:	08000dcd 	.word	0x08000dcd
 8000e38:	08000f13 	.word	0x08000f13
 8000e3c:	6833      	ldr	r3, [r6, #0]
 8000e3e:	1d1a      	adds	r2, r3, #4
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	6032      	str	r2, [r6, #0]
 8000e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e09d      	b.n	8000f8c <_printf_i+0x1e8>
 8000e50:	6833      	ldr	r3, [r6, #0]
 8000e52:	6820      	ldr	r0, [r4, #0]
 8000e54:	1d19      	adds	r1, r3, #4
 8000e56:	6031      	str	r1, [r6, #0]
 8000e58:	0606      	lsls	r6, r0, #24
 8000e5a:	d501      	bpl.n	8000e60 <_printf_i+0xbc>
 8000e5c:	681d      	ldr	r5, [r3, #0]
 8000e5e:	e003      	b.n	8000e68 <_printf_i+0xc4>
 8000e60:	0645      	lsls	r5, r0, #25
 8000e62:	d5fb      	bpl.n	8000e5c <_printf_i+0xb8>
 8000e64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	da03      	bge.n	8000e74 <_printf_i+0xd0>
 8000e6c:	232d      	movs	r3, #45	@ 0x2d
 8000e6e:	426d      	negs	r5, r5
 8000e70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e74:	4859      	ldr	r0, [pc, #356]	@ (8000fdc <_printf_i+0x238>)
 8000e76:	230a      	movs	r3, #10
 8000e78:	e011      	b.n	8000e9e <_printf_i+0xfa>
 8000e7a:	6821      	ldr	r1, [r4, #0]
 8000e7c:	6833      	ldr	r3, [r6, #0]
 8000e7e:	0608      	lsls	r0, r1, #24
 8000e80:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e84:	d402      	bmi.n	8000e8c <_printf_i+0xe8>
 8000e86:	0649      	lsls	r1, r1, #25
 8000e88:	bf48      	it	mi
 8000e8a:	b2ad      	uxthmi	r5, r5
 8000e8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e8e:	4853      	ldr	r0, [pc, #332]	@ (8000fdc <_printf_i+0x238>)
 8000e90:	6033      	str	r3, [r6, #0]
 8000e92:	bf14      	ite	ne
 8000e94:	230a      	movne	r3, #10
 8000e96:	2308      	moveq	r3, #8
 8000e98:	2100      	movs	r1, #0
 8000e9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e9e:	6866      	ldr	r6, [r4, #4]
 8000ea0:	60a6      	str	r6, [r4, #8]
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	bfa2      	ittt	ge
 8000ea6:	6821      	ldrge	r1, [r4, #0]
 8000ea8:	f021 0104 	bicge.w	r1, r1, #4
 8000eac:	6021      	strge	r1, [r4, #0]
 8000eae:	b90d      	cbnz	r5, 8000eb4 <_printf_i+0x110>
 8000eb0:	2e00      	cmp	r6, #0
 8000eb2:	d04b      	beq.n	8000f4c <_printf_i+0x1a8>
 8000eb4:	4616      	mov	r6, r2
 8000eb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8000eba:	fb03 5711 	mls	r7, r3, r1, r5
 8000ebe:	5dc7      	ldrb	r7, [r0, r7]
 8000ec0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000ec4:	462f      	mov	r7, r5
 8000ec6:	42bb      	cmp	r3, r7
 8000ec8:	460d      	mov	r5, r1
 8000eca:	d9f4      	bls.n	8000eb6 <_printf_i+0x112>
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d10b      	bne.n	8000ee8 <_printf_i+0x144>
 8000ed0:	6823      	ldr	r3, [r4, #0]
 8000ed2:	07df      	lsls	r7, r3, #31
 8000ed4:	d508      	bpl.n	8000ee8 <_printf_i+0x144>
 8000ed6:	6923      	ldr	r3, [r4, #16]
 8000ed8:	6861      	ldr	r1, [r4, #4]
 8000eda:	4299      	cmp	r1, r3
 8000edc:	bfde      	ittt	le
 8000ede:	2330      	movle	r3, #48	@ 0x30
 8000ee0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000ee4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000ee8:	1b92      	subs	r2, r2, r6
 8000eea:	6122      	str	r2, [r4, #16]
 8000eec:	f8cd a000 	str.w	sl, [sp]
 8000ef0:	464b      	mov	r3, r9
 8000ef2:	aa03      	add	r2, sp, #12
 8000ef4:	4621      	mov	r1, r4
 8000ef6:	4640      	mov	r0, r8
 8000ef8:	f7ff fee6 	bl	8000cc8 <_printf_common>
 8000efc:	3001      	adds	r0, #1
 8000efe:	d14a      	bne.n	8000f96 <_printf_i+0x1f2>
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f04:	b004      	add	sp, #16
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	f043 0320 	orr.w	r3, r3, #32
 8000f10:	6023      	str	r3, [r4, #0]
 8000f12:	4833      	ldr	r0, [pc, #204]	@ (8000fe0 <_printf_i+0x23c>)
 8000f14:	2778      	movs	r7, #120	@ 0x78
 8000f16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	6831      	ldr	r1, [r6, #0]
 8000f1e:	061f      	lsls	r7, r3, #24
 8000f20:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f24:	d402      	bmi.n	8000f2c <_printf_i+0x188>
 8000f26:	065f      	lsls	r7, r3, #25
 8000f28:	bf48      	it	mi
 8000f2a:	b2ad      	uxthmi	r5, r5
 8000f2c:	6031      	str	r1, [r6, #0]
 8000f2e:	07d9      	lsls	r1, r3, #31
 8000f30:	bf44      	itt	mi
 8000f32:	f043 0320 	orrmi.w	r3, r3, #32
 8000f36:	6023      	strmi	r3, [r4, #0]
 8000f38:	b11d      	cbz	r5, 8000f42 <_printf_i+0x19e>
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	e7ac      	b.n	8000e98 <_printf_i+0xf4>
 8000f3e:	4827      	ldr	r0, [pc, #156]	@ (8000fdc <_printf_i+0x238>)
 8000f40:	e7e9      	b.n	8000f16 <_printf_i+0x172>
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	f023 0320 	bic.w	r3, r3, #32
 8000f48:	6023      	str	r3, [r4, #0]
 8000f4a:	e7f6      	b.n	8000f3a <_printf_i+0x196>
 8000f4c:	4616      	mov	r6, r2
 8000f4e:	e7bd      	b.n	8000ecc <_printf_i+0x128>
 8000f50:	6833      	ldr	r3, [r6, #0]
 8000f52:	6825      	ldr	r5, [r4, #0]
 8000f54:	6961      	ldr	r1, [r4, #20]
 8000f56:	1d18      	adds	r0, r3, #4
 8000f58:	6030      	str	r0, [r6, #0]
 8000f5a:	062e      	lsls	r6, r5, #24
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	d501      	bpl.n	8000f64 <_printf_i+0x1c0>
 8000f60:	6019      	str	r1, [r3, #0]
 8000f62:	e002      	b.n	8000f6a <_printf_i+0x1c6>
 8000f64:	0668      	lsls	r0, r5, #25
 8000f66:	d5fb      	bpl.n	8000f60 <_printf_i+0x1bc>
 8000f68:	8019      	strh	r1, [r3, #0]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	6123      	str	r3, [r4, #16]
 8000f6e:	4616      	mov	r6, r2
 8000f70:	e7bc      	b.n	8000eec <_printf_i+0x148>
 8000f72:	6833      	ldr	r3, [r6, #0]
 8000f74:	1d1a      	adds	r2, r3, #4
 8000f76:	6032      	str	r2, [r6, #0]
 8000f78:	681e      	ldr	r6, [r3, #0]
 8000f7a:	6862      	ldr	r2, [r4, #4]
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4630      	mov	r0, r6
 8000f80:	f7ff f926 	bl	80001d0 <memchr>
 8000f84:	b108      	cbz	r0, 8000f8a <_printf_i+0x1e6>
 8000f86:	1b80      	subs	r0, r0, r6
 8000f88:	6060      	str	r0, [r4, #4]
 8000f8a:	6863      	ldr	r3, [r4, #4]
 8000f8c:	6123      	str	r3, [r4, #16]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f94:	e7aa      	b.n	8000eec <_printf_i+0x148>
 8000f96:	6923      	ldr	r3, [r4, #16]
 8000f98:	4632      	mov	r2, r6
 8000f9a:	4649      	mov	r1, r9
 8000f9c:	4640      	mov	r0, r8
 8000f9e:	47d0      	blx	sl
 8000fa0:	3001      	adds	r0, #1
 8000fa2:	d0ad      	beq.n	8000f00 <_printf_i+0x15c>
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	079b      	lsls	r3, r3, #30
 8000fa8:	d413      	bmi.n	8000fd2 <_printf_i+0x22e>
 8000faa:	68e0      	ldr	r0, [r4, #12]
 8000fac:	9b03      	ldr	r3, [sp, #12]
 8000fae:	4298      	cmp	r0, r3
 8000fb0:	bfb8      	it	lt
 8000fb2:	4618      	movlt	r0, r3
 8000fb4:	e7a6      	b.n	8000f04 <_printf_i+0x160>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4632      	mov	r2, r6
 8000fba:	4649      	mov	r1, r9
 8000fbc:	4640      	mov	r0, r8
 8000fbe:	47d0      	blx	sl
 8000fc0:	3001      	adds	r0, #1
 8000fc2:	d09d      	beq.n	8000f00 <_printf_i+0x15c>
 8000fc4:	3501      	adds	r5, #1
 8000fc6:	68e3      	ldr	r3, [r4, #12]
 8000fc8:	9903      	ldr	r1, [sp, #12]
 8000fca:	1a5b      	subs	r3, r3, r1
 8000fcc:	42ab      	cmp	r3, r5
 8000fce:	dcf2      	bgt.n	8000fb6 <_printf_i+0x212>
 8000fd0:	e7eb      	b.n	8000faa <_printf_i+0x206>
 8000fd2:	2500      	movs	r5, #0
 8000fd4:	f104 0619 	add.w	r6, r4, #25
 8000fd8:	e7f5      	b.n	8000fc6 <_printf_i+0x222>
 8000fda:	bf00      	nop
 8000fdc:	080010f4 	.word	0x080010f4
 8000fe0:	08001105 	.word	0x08001105

08000fe4 <memmove>:
 8000fe4:	4288      	cmp	r0, r1
 8000fe6:	b510      	push	{r4, lr}
 8000fe8:	eb01 0402 	add.w	r4, r1, r2
 8000fec:	d902      	bls.n	8000ff4 <memmove+0x10>
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	4623      	mov	r3, r4
 8000ff2:	d807      	bhi.n	8001004 <memmove+0x20>
 8000ff4:	1e43      	subs	r3, r0, #1
 8000ff6:	42a1      	cmp	r1, r4
 8000ff8:	d008      	beq.n	800100c <memmove+0x28>
 8000ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001002:	e7f8      	b.n	8000ff6 <memmove+0x12>
 8001004:	4402      	add	r2, r0
 8001006:	4601      	mov	r1, r0
 8001008:	428a      	cmp	r2, r1
 800100a:	d100      	bne.n	800100e <memmove+0x2a>
 800100c:	bd10      	pop	{r4, pc}
 800100e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001016:	e7f7      	b.n	8001008 <memmove+0x24>

08001018 <_sbrk_r>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	4d06      	ldr	r5, [pc, #24]	@ (8001034 <_sbrk_r+0x1c>)
 800101c:	2300      	movs	r3, #0
 800101e:	4604      	mov	r4, r0
 8001020:	4608      	mov	r0, r1
 8001022:	602b      	str	r3, [r5, #0]
 8001024:	f7ff fa88 	bl	8000538 <_sbrk>
 8001028:	1c43      	adds	r3, r0, #1
 800102a:	d102      	bne.n	8001032 <_sbrk_r+0x1a>
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	b103      	cbz	r3, 8001032 <_sbrk_r+0x1a>
 8001030:	6023      	str	r3, [r4, #0]
 8001032:	bd38      	pop	{r3, r4, r5, pc}
 8001034:	200001ac 	.word	0x200001ac

08001038 <memcpy>:
 8001038:	440a      	add	r2, r1
 800103a:	4291      	cmp	r1, r2
 800103c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001040:	d100      	bne.n	8001044 <memcpy+0xc>
 8001042:	4770      	bx	lr
 8001044:	b510      	push	{r4, lr}
 8001046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800104a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800104e:	4291      	cmp	r1, r2
 8001050:	d1f9      	bne.n	8001046 <memcpy+0xe>
 8001052:	bd10      	pop	{r4, pc}

08001054 <_realloc_r>:
 8001054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001058:	4680      	mov	r8, r0
 800105a:	4615      	mov	r5, r2
 800105c:	460c      	mov	r4, r1
 800105e:	b921      	cbnz	r1, 800106a <_realloc_r+0x16>
 8001060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001064:	4611      	mov	r1, r2
 8001066:	f7ff bc4b 	b.w	8000900 <_malloc_r>
 800106a:	b92a      	cbnz	r2, 8001078 <_realloc_r+0x24>
 800106c:	f7ff fbdc 	bl	8000828 <_free_r>
 8001070:	2400      	movs	r4, #0
 8001072:	4620      	mov	r0, r4
 8001074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001078:	f000 f81a 	bl	80010b0 <_malloc_usable_size_r>
 800107c:	4285      	cmp	r5, r0
 800107e:	4606      	mov	r6, r0
 8001080:	d802      	bhi.n	8001088 <_realloc_r+0x34>
 8001082:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001086:	d8f4      	bhi.n	8001072 <_realloc_r+0x1e>
 8001088:	4629      	mov	r1, r5
 800108a:	4640      	mov	r0, r8
 800108c:	f7ff fc38 	bl	8000900 <_malloc_r>
 8001090:	4607      	mov	r7, r0
 8001092:	2800      	cmp	r0, #0
 8001094:	d0ec      	beq.n	8001070 <_realloc_r+0x1c>
 8001096:	42b5      	cmp	r5, r6
 8001098:	462a      	mov	r2, r5
 800109a:	4621      	mov	r1, r4
 800109c:	bf28      	it	cs
 800109e:	4632      	movcs	r2, r6
 80010a0:	f7ff ffca 	bl	8001038 <memcpy>
 80010a4:	4621      	mov	r1, r4
 80010a6:	4640      	mov	r0, r8
 80010a8:	f7ff fbbe 	bl	8000828 <_free_r>
 80010ac:	463c      	mov	r4, r7
 80010ae:	e7e0      	b.n	8001072 <_realloc_r+0x1e>

080010b0 <_malloc_usable_size_r>:
 80010b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010b4:	1f18      	subs	r0, r3, #4
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bfbc      	itt	lt
 80010ba:	580b      	ldrlt	r3, [r1, r0]
 80010bc:	18c0      	addlt	r0, r0, r3
 80010be:	4770      	bx	lr

080010c0 <_init>:
 80010c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c2:	bf00      	nop
 80010c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010c6:	bc08      	pop	{r3}
 80010c8:	469e      	mov	lr, r3
 80010ca:	4770      	bx	lr

080010cc <_fini>:
 80010cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ce:	bf00      	nop
 80010d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010d2:	bc08      	pop	{r3}
 80010d4:	469e      	mov	lr, r3
 80010d6:	4770      	bx	lr
