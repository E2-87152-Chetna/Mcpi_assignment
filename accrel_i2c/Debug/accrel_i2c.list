
accrel_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001310  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080014a0  080014a0  000024a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014e4  080014e4  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  080014e4  080014e4  000024e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080014ec  080014ec  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014ec  080014ec  000024ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014f0  080014f0  000024f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080014f4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000019b1  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000094d  00000000  00000000  00004a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00005380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000139  00000000  00000000  00005550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019660  00000000  00000000  00005689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002514  00000000  00000000  0001ece9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c0f5  00000000  00000000  000211fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ad2f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a38  00000000  00000000  000ad338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000add70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004d  00000000  00000000  000add8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001488 	.word	0x08001488

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001488 	.word	0x08001488

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <DelayMs+0x44>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <DelayMs+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <DelayMs+0x4c>)
 8000284:	fba2 2303 	umull	r2, r3, r2, r3
 8000288:	099b      	lsrs	r3, r3, #6
 800028a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <DelayMs+0x44>)
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	1ad2      	subs	r2, r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f8      	bcc.n	8000298 <DelayMs+0x28>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e0001000 	.word	0xe0001000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	10624dd3 	.word	0x10624dd3

080002c0 <SPI_WriteIO>:
Date: Sep 25, 2024
*/

#include "accel.h"

void SPI_WriteIO(uint8_t regr, uint8_t data[], uint8_t size) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
 80002cc:	4613      	mov	r3, r2
 80002ce:	71bb      	strb	r3, [r7, #6]
	// enable slave
	SPI_CS_Enable();
 80002d0:	f000 fb60 	bl	8000994 <SPI_CS_Enable>
	// send regr address (internal address) : MSB=0
	regr &= ~BV(7);
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80002da:	71fb      	strb	r3, [r7, #7]
	SPI_Transmit(regr);
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	b29b      	uxth	r3, r3
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fb73 	bl	80009cc <SPI_Transmit>
	// write multiple bytes of data
	for(int i=0; i<size; i++)
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	e009      	b.n	8000300 <SPI_WriteIO+0x40>
		SPI_Transmit(data[i]);
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	4413      	add	r3, r2
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fb69 	bl	80009cc <SPI_Transmit>
	for(int i=0; i<size; i++)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	3301      	adds	r3, #1
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	68fa      	ldr	r2, [r7, #12]
 8000304:	429a      	cmp	r2, r3
 8000306:	dbf1      	blt.n	80002ec <SPI_WriteIO+0x2c>
	// disable slave
	SPI_CS_Disable();
 8000308:	f000 fb52 	bl	80009b0 <SPI_CS_Disable>
}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <SPI_ReadIO>:

void SPI_ReadIO(uint8_t regr, uint8_t data[], uint8_t size) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
 8000320:	4613      	mov	r3, r2
 8000322:	71bb      	strb	r3, [r7, #6]
	// enable slave
	SPI_CS_Enable();
 8000324:	f000 fb36 	bl	8000994 <SPI_CS_Enable>
	// send regr address (internal address) : MSB=1
	regr |= BV(7);
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800032e:	71fb      	strb	r3, [r7, #7]
	SPI_Transmit(regr);
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	b29b      	uxth	r3, r3
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fb49 	bl	80009cc <SPI_Transmit>
	// read multiple bytes of data
	for(int i=0; i<size; i++)
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	e00b      	b.n	8000358 <SPI_ReadIO+0x44>
		data[i] = SPI_Receive();
 8000340:	f000 fb66 	bl	8000a10 <SPI_Receive>
 8000344:	4603      	mov	r3, r0
 8000346:	4619      	mov	r1, r3
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	4413      	add	r3, r2
 800034e:	b2ca      	uxtb	r2, r1
 8000350:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++)
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3301      	adds	r3, #1
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	68fa      	ldr	r2, [r7, #12]
 800035c:	429a      	cmp	r2, r3
 800035e:	dbef      	blt.n	8000340 <SPI_ReadIO+0x2c>
	// disable slave
	SPI_CS_Disable();
 8000360:	f000 fb26 	bl	80009b0 <SPI_CS_Disable>
}
 8000364:	bf00      	nop
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <LIS_Init>:


// LIS Initialization = Enable axes and Set data rate
void LIS_Init(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
	// initialize spi
	SPI_Init();
 8000372:	f000 faa7 	bl	80008c4 <SPI_Init>
	DelayMs(3);
 8000376:	2003      	movs	r0, #3
 8000378:	f7ff ff7a 	bl	8000270 <DelayMs>
	// enable axes and set data rate
	uint8_t config = LIS_CR4_RATE_25 | LIS_CR4_XYZ_EN;
 800037c:	2347      	movs	r3, #71	@ 0x47
 800037e:	71fb      	strb	r3, [r7, #7]
	SPI_WriteIO(LIS_CR4_ADDR, &config, 1);
 8000380:	1dfb      	adds	r3, r7, #7
 8000382:	2201      	movs	r2, #1
 8000384:	4619      	mov	r1, r3
 8000386:	2020      	movs	r0, #32
 8000388:	f7ff ff9a 	bl	80002c0 <SPI_WriteIO>
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <LIS_IsDataAvail>:

// LIS Poll = Check if new data (X, Y, Z reading) is available
int LIS_IsDataAvail(void) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
	uint8_t status;
	do {
		// read status regr value
		SPI_ReadIO(LIS_STATUS_ADDR, &status, 1);
 800039a:	1dfb      	adds	r3, r7, #7
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	2027      	movs	r0, #39	@ 0x27
 80003a2:	f7ff ffb7 	bl	8000314 <SPI_ReadIO>
		// repeat until data is avail
	} while(!(status & LIS_SR_XYZDA));
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	f003 0308 	and.w	r3, r3, #8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0f4      	beq.n	800039a <LIS_IsDataAvail+0x6>
	return 1;
 80003b0:	2301      	movs	r3, #1
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <LIS_GetData>:

// LIS Read = Get X, Y, Z axis data from Accel
LIS_Data LIS_GetData(void) {
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b086      	sub	sp, #24
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	LIS_Data val;
	// read x axis reading
	SPI_ReadIO(LIS_XL_ADDR, data, 2); // data[0]=L, data[1]=H
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	2202      	movs	r2, #2
 80003c8:	4619      	mov	r1, r3
 80003ca:	2028      	movs	r0, #40	@ 0x28
 80003cc:	f7ff ffa2 	bl	8000314 <SPI_ReadIO>
	val.x = ((uint16_t)data[1] << 8) | data[0];
 80003d0:	7d7b      	ldrb	r3, [r7, #21]
 80003d2:	021b      	lsls	r3, r3, #8
 80003d4:	b21a      	sxth	r2, r3
 80003d6:	7d3b      	ldrb	r3, [r7, #20]
 80003d8:	b21b      	sxth	r3, r3
 80003da:	4313      	orrs	r3, r2
 80003dc:	b21b      	sxth	r3, r3
 80003de:	81bb      	strh	r3, [r7, #12]
	// read y axis reading
	SPI_ReadIO(LIS_YL_ADDR, data, 2); // data[0]=L, data[1]=H
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	2202      	movs	r2, #2
 80003e6:	4619      	mov	r1, r3
 80003e8:	202a      	movs	r0, #42	@ 0x2a
 80003ea:	f7ff ff93 	bl	8000314 <SPI_ReadIO>
	val.y = ((uint16_t)data[1] << 8) | data[0];
 80003ee:	7d7b      	ldrb	r3, [r7, #21]
 80003f0:	021b      	lsls	r3, r3, #8
 80003f2:	b21a      	sxth	r2, r3
 80003f4:	7d3b      	ldrb	r3, [r7, #20]
 80003f6:	b21b      	sxth	r3, r3
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b21b      	sxth	r3, r3
 80003fc:	81fb      	strh	r3, [r7, #14]
	// read z axis reading
	SPI_ReadIO(LIS_ZL_ADDR, data, 2); // data[0]=L, data[1]=H
 80003fe:	f107 0314 	add.w	r3, r7, #20
 8000402:	2202      	movs	r2, #2
 8000404:	4619      	mov	r1, r3
 8000406:	202c      	movs	r0, #44	@ 0x2c
 8000408:	f7ff ff84 	bl	8000314 <SPI_ReadIO>
	val.z = ((uint16_t)data[1] << 8) | data[0];
 800040c:	7d7b      	ldrb	r3, [r7, #21]
 800040e:	021b      	lsls	r3, r3, #8
 8000410:	b21a      	sxth	r2, r3
 8000412:	7d3b      	ldrb	r3, [r7, #20]
 8000414:	b21b      	sxth	r3, r3
 8000416:	4313      	orrs	r3, r2
 8000418:	b21b      	sxth	r3, r3
 800041a:	823b      	strh	r3, [r7, #16]
	return val;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	461a      	mov	r2, r3
 8000420:	f107 030c 	add.w	r3, r7, #12
 8000424:	6818      	ldr	r0, [r3, #0]
 8000426:	6010      	str	r0, [r2, #0]
 8000428:	889b      	ldrh	r3, [r3, #4]
 800042a:	8093      	strh	r3, [r2, #4]
}
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	3718      	adds	r7, #24
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <I2C_Init>:
Date: Sep 24, 2024
*/

#include "i2c.h"

void I2C_Init(void) {
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	// PB6, PB7 -- GPIO Init -- MODER, AFRL, PUPDR, CLKEN
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000438:	4b2c      	ldr	r3, [pc, #176]	@ (80004ec <I2C_Init+0xb8>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043c:	4a2b      	ldr	r2, [pc, #172]	@ (80004ec <I2C_Init+0xb8>)
 800043e:	f043 0302 	orr.w	r3, r3, #2
 8000442:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOB->MODER |= (BV(SCL_PIN*2+1) | BV(SDA_PIN*2+1));
 8000444:	4b2a      	ldr	r3, [pc, #168]	@ (80004f0 <I2C_Init+0xbc>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a29      	ldr	r2, [pc, #164]	@ (80004f0 <I2C_Init+0xbc>)
 800044a:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800044e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(BV(SCL_PIN*2) | BV(SDA_PIN*2));
 8000450:	4b27      	ldr	r3, [pc, #156]	@ (80004f0 <I2C_Init+0xbc>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a26      	ldr	r2, [pc, #152]	@ (80004f0 <I2C_Init+0xbc>)
 8000456:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 800045a:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(BV(SCL_PIN*2+1) | BV(SDA_PIN*2+1) | BV(SCL_PIN*2) | BV(SDA_PIN*2)); // no pull-up/down
 800045c:	4b24      	ldr	r3, [pc, #144]	@ (80004f0 <I2C_Init+0xbc>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	4a23      	ldr	r2, [pc, #140]	@ (80004f0 <I2C_Init+0xbc>)
 8000462:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000466:	60d3      	str	r3, [r2, #12]
    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= BV(30) | BV(26);
 8000468:	4b21      	ldr	r3, [pc, #132]	@ (80004f0 <I2C_Init+0xbc>)
 800046a:	6a1b      	ldr	r3, [r3, #32]
 800046c:	4a20      	ldr	r2, [pc, #128]	@ (80004f0 <I2C_Init+0xbc>)
 800046e:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8000472:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] &= ~(BV(31) | BV(29) | BV(28) | BV(27) | BV(25) | BV(24));
 8000474:	4b1e      	ldr	r3, [pc, #120]	@ (80004f0 <I2C_Init+0xbc>)
 8000476:	6a1b      	ldr	r3, [r3, #32]
 8000478:	4a1d      	ldr	r2, [pc, #116]	@ (80004f0 <I2C_Init+0xbc>)
 800047a:	f023 433b 	bic.w	r3, r3, #3137339392	@ 0xbb000000
 800047e:	6213      	str	r3, [r2, #32]

	// I2C1 Init -- CR1, CR2, CCR, TRISE, CLKEN
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000480:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <I2C_Init+0xb8>)
 8000482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000484:	4a19      	ldr	r2, [pc, #100]	@ (80004ec <I2C_Init+0xb8>)
 8000486:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800048a:	6413      	str	r3, [r2, #64]	@ 0x40
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 800048c:	4b19      	ldr	r3, [pc, #100]	@ (80004f4 <I2C_Init+0xc0>)
 800048e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000492:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 8000494:	4b17      	ldr	r3, [pc, #92]	@ (80004f4 <I2C_Init+0xc0>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
    // set pclk in CR2 (16 MHz)
    I2C1->CR2 |= 16;
 800049a:	4b16      	ldr	r3, [pc, #88]	@ (80004f4 <I2C_Init+0xc0>)
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	4a15      	ldr	r2, [pc, #84]	@ (80004f4 <I2C_Init+0xc0>)
 80004a0:	f043 0310 	orr.w	r3, r3, #16
 80004a4:	6053      	str	r3, [r2, #4]
    // set i2c bitrate to 100KHz (std mode)
    I2C1->CCR &= ~I2C_CCR_FS; // change mode to standard mode
 80004a6:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <I2C_Init+0xc0>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a12      	ldr	r2, [pc, #72]	@ (80004f4 <I2C_Init+0xc0>)
 80004ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80004b0:	61d3      	str	r3, [r2, #28]
    I2C1->CCR |= 80;			// CCR = Ton / Tpclk = 5 / 0.0625 = 80
 80004b2:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <I2C_Init+0xc0>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a0f      	ldr	r2, [pc, #60]	@ (80004f4 <I2C_Init+0xc0>)
 80004b8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80004bc:	61d3      	str	r3, [r2, #28]
    // standard mode Max Trise = 1000 ns
    // set Trise = Max Trise / Tpclk = 1000 / 62.5 = 17
    I2C1->TRISE |= 17;
 80004be:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <I2C_Init+0xc0>)
 80004c0:	6a1b      	ldr	r3, [r3, #32]
 80004c2:	4a0c      	ldr	r2, [pc, #48]	@ (80004f4 <I2C_Init+0xc0>)
 80004c4:	f043 0311 	orr.w	r3, r3, #17
 80004c8:	6213      	str	r3, [r2, #32]
    // Enable Ack
    I2C1->CR1 |= I2C_CR1_ACK;
 80004ca:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <I2C_Init+0xc0>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a09      	ldr	r2, [pc, #36]	@ (80004f4 <I2C_Init+0xc0>)
 80004d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004d4:	6013      	str	r3, [r2, #0]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 80004d6:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <I2C_Init+0xc0>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a06      	ldr	r2, [pc, #24]	@ (80004f4 <I2C_Init+0xc0>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6013      	str	r3, [r2, #0]
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40023800 	.word	0x40023800
 80004f0:	40020400 	.word	0x40020400
 80004f4:	40005400 	.word	0x40005400

080004f8 <I2C_Start>:

void I2C_Start(void) {
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
	// CR1 -- send start bit
    I2C1->CR1 |= I2C_CR1_START;
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <I2C_Start+0x28>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a07      	ldr	r2, [pc, #28]	@ (8000520 <I2C_Start+0x28>)
 8000502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000506:	6013      	str	r3, [r2, #0]
	// SR1 -- poll for SB (start bit sent)
    while(!(I2C1->SR1 & I2C_SR1_SB));
 8000508:	bf00      	nop
 800050a:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <I2C_Start+0x28>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0f9      	beq.n	800050a <I2C_Start+0x12>
}
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40005400 	.word	0x40005400

08000524 <I2C_Stop>:
void I2C_RepeatStart(void) {
	I2C_Start();
}
void I2C_Stop(void) {
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	// CR1 -- send stop bit
    I2C1->CR1 |= I2C_CR1_STOP;
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <I2C_Stop+0x28>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a07      	ldr	r2, [pc, #28]	@ (800054c <I2C_Stop+0x28>)
 800052e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000532:	6013      	str	r3, [r2, #0]
    // SR2 -- poll for bus to be release
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000534:	bf00      	nop
 8000536:	4b05      	ldr	r3, [pc, #20]	@ (800054c <I2C_Stop+0x28>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0f9      	beq.n	8000536 <I2C_Stop+0x12>
}
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	40005400 	.word	0x40005400

08000550 <I2C_SendSlaveAddr>:
void I2C_SendSlaveAddr(uint8_t slaveAddr) {
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	// DR -- write slave addr in data regr
    I2C1->DR = slaveAddr;
 800055a:	4a09      	ldr	r2, [pc, #36]	@ (8000580 <I2C_SendSlaveAddr+0x30>)
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	6113      	str	r3, [r2, #16]
	// SR1 -- poll for addr is transferred
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000560:	bf00      	nop
 8000562:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <I2C_SendSlaveAddr+0x30>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f9      	beq.n	8000562 <I2C_SendSlaveAddr+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 800056e:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <I2C_SendSlaveAddr+0x30>)
 8000570:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8000572:	4b03      	ldr	r3, [pc, #12]	@ (8000580 <I2C_SendSlaveAddr+0x30>)
 8000574:	699b      	ldr	r3, [r3, #24]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40005400 	.word	0x40005400

08000584 <I2C_SendData>:
void I2C_SendData(uint8_t data) {
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	// SR1 -- wait while previous data is not transmitted
	while (!(I2C1->SR1 & I2C_SR1_TXE));
 800058e:	bf00      	nop
 8000590:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <I2C_SendData+0x38>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000598:	2b00      	cmp	r3, #0
 800059a:	d0f9      	beq.n	8000590 <I2C_SendData+0xc>
	// DR -- write data in data regr
    I2C1->DR = data;
 800059c:	4a07      	ldr	r2, [pc, #28]	@ (80005bc <I2C_SendData+0x38>)
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	6113      	str	r3, [r2, #16]
	// SR1 -- poll for BTF is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 80005a2:	bf00      	nop
 80005a4:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <I2C_SendData+0x38>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f003 0304 	and.w	r3, r3, #4
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d0f9      	beq.n	80005a4 <I2C_SendData+0x20>
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40005400 	.word	0x40005400

080005c0 <I2C_IsDeviceReady>:
	// read content and clear flags
	uint16_t val = I2C1->DR;
	return val;
}

int I2C_IsDeviceReady(uint8_t slaveAddr) {
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	// DR -- write slave addr in data regr
    I2C1->DR = slaveAddr;
 80005ca:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <I2C_IsDeviceReady+0x34>)
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	6113      	str	r3, [r2, #16]
	// SR1 -- poll for addr is transferred
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80005d0:	bf00      	nop
 80005d2:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <I2C_IsDeviceReady+0x34>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f9      	beq.n	80005d2 <I2C_IsDeviceReady+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 80005de:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <I2C_IsDeviceReady+0x34>)
 80005e0:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 80005e2:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <I2C_IsDeviceReady+0x34>)
 80005e4:	699b      	ldr	r3, [r3, #24]
    return 1;
 80005e6:	2301      	movs	r3, #1
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40005400 	.word	0x40005400

080005f8 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000600:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <DelayMs+0x44>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <DelayMs+0x48>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a0e      	ldr	r2, [pc, #56]	@ (8000644 <DelayMs+0x4c>)
 800060c:	fba2 2303 	umull	r2, r3, r2, r3
 8000610:	099b      	lsrs	r3, r3, #6
 8000612:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800061e:	bf00      	nop
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <DelayMs+0x44>)
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	1ad2      	subs	r2, r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	429a      	cmp	r2, r3
 800062c:	d3f8      	bcc.n	8000620 <DelayMs+0x28>
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e0001000 	.word	0xe0001000
 8000640:	20000000 	.word	0x20000000
 8000644:	10624dd3 	.word	0x10624dd3

08000648 <Lcd_Write4BitAndCtrl>:
 *      Author: Nilesh
 */

#include "i2c_lcd.h"

void Lcd_Write4BitAndCtrl(uint8_t val) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	I2C_Start();
 8000652:	f7ff ff51 	bl	80004f8 <I2C_Start>
	I2C_SendSlaveAddr(LCD_SLAVE_ADDR_W);
 8000656:	204e      	movs	r0, #78	@ 0x4e
 8000658:	f7ff ff7a 	bl	8000550 <I2C_SendSlaveAddr>
	I2C_SendData(val);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff90 	bl	8000584 <I2C_SendData>
	I2C_Stop();
 8000664:	f7ff ff5e 	bl	8000524 <I2C_Stop>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <Lcd_WriteByte>:

void Lcd_WriteByte(uint8_t rs, uint8_t val) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	460a      	mov	r2, r1
 800067a:	71fb      	strb	r3, [r7, #7]
 800067c:	4613      	mov	r3, r2
 800067e:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val & 0xF0, low = (val << 4) & 0xF0;
 8000680:	79bb      	ldrb	r3, [r7, #6]
 8000682:	f023 030f 	bic.w	r3, r3, #15
 8000686:	73fb      	strb	r3, [r7, #15]
 8000688:	79bb      	ldrb	r3, [r7, #6]
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	73bb      	strb	r3, [r7, #14]
	uint8_t bvrs = (rs == LCD_CMD) ? 0 : BV(LCD_RS);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b80      	cmp	r3, #128	@ 0x80
 8000692:	bf14      	ite	ne
 8000694:	2301      	movne	r3, #1
 8000696:	2300      	moveq	r3, #0
 8000698:	b2db      	uxtb	r3, r3
 800069a:	737b      	strb	r3, [r7, #13]
	Lcd_Write4BitAndCtrl(high | bvrs | BV(LCD_EN) | BV(LCD_BL));
 800069c:	7bfa      	ldrb	r2, [r7, #15]
 800069e:	7b7b      	ldrb	r3, [r7, #13]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	f043 030c 	orr.w	r3, r3, #12
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffcc 	bl	8000648 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff ffa1 	bl	80005f8 <DelayMs>
	Lcd_Write4BitAndCtrl(high | bvrs | BV(LCD_BL));
 80006b6:	7bfa      	ldrb	r2, [r7, #15]
 80006b8:	7b7b      	ldrb	r3, [r7, #13]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ffbf 	bl	8000648 <Lcd_Write4BitAndCtrl>

	Lcd_Write4BitAndCtrl(low | bvrs | BV(LCD_EN) | BV(LCD_BL));
 80006ca:	7bba      	ldrb	r2, [r7, #14]
 80006cc:	7b7b      	ldrb	r3, [r7, #13]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f043 030c 	orr.w	r3, r3, #12
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ffb5 	bl	8000648 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f7ff ff8a 	bl	80005f8 <DelayMs>
	Lcd_Write4BitAndCtrl(low | bvrs | BV(LCD_BL));
 80006e4:	7bba      	ldrb	r2, [r7, #14]
 80006e6:	7b7b      	ldrb	r3, [r7, #13]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f043 0308 	orr.w	r3, r3, #8
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ffa8 	bl	8000648 <Lcd_Write4BitAndCtrl>
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <Lcd_Init>:

// As per 4-bit initialization sequence mentioned HD44780 datasheet fig 24 (page 46)
int Lcd_Init() {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	// wait for min 15 ms (for 5V)
	DelayMs(20);
 8000706:	2014      	movs	r0, #20
 8000708:	f7ff ff76 	bl	80005f8 <DelayMs>
	I2C_Init();
 800070c:	f7ff fe92 	bl	8000434 <I2C_Init>
	// check if lcd is ready
	I2C_Start();
 8000710:	f7ff fef2 	bl	80004f8 <I2C_Start>
	int ret = I2C_IsDeviceReady(LCD_SLAVE_ADDR_W);
 8000714:	204e      	movs	r0, #78	@ 0x4e
 8000716:	f7ff ff53 	bl	80005c0 <I2C_IsDeviceReady>
 800071a:	6078      	str	r0, [r7, #4]
	I2C_Stop();
 800071c:	f7ff ff02 	bl	8000524 <I2C_Stop>
	if(!ret)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d101      	bne.n	800072a <Lcd_Init+0x2a>
		return 0;
 8000726:	2300      	movs	r3, #0
 8000728:	e04b      	b.n	80007c2 <Lcd_Init+0xc2>

	// attention sequence
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 800072a:	2034      	movs	r0, #52	@ 0x34
 800072c:	f7ff ff8c 	bl	8000648 <Lcd_Write4BitAndCtrl>
	__NOP();
 8000730:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 8000732:	2030      	movs	r0, #48	@ 0x30
 8000734:	f7ff ff88 	bl	8000648 <Lcd_Write4BitAndCtrl>
	DelayMs(5);
 8000738:	2005      	movs	r0, #5
 800073a:	f7ff ff5d 	bl	80005f8 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 800073e:	2034      	movs	r0, #52	@ 0x34
 8000740:	f7ff ff82 	bl	8000648 <Lcd_Write4BitAndCtrl>
	__NOP();
 8000744:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 8000746:	2030      	movs	r0, #48	@ 0x30
 8000748:	f7ff ff7e 	bl	8000648 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f7ff ff53 	bl	80005f8 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 8000752:	2034      	movs	r0, #52	@ 0x34
 8000754:	f7ff ff78 	bl	8000648 <Lcd_Write4BitAndCtrl>
	__NOP();
 8000758:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 800075a:	2030      	movs	r0, #48	@ 0x30
 800075c:	f7ff ff74 	bl	8000648 <Lcd_Write4BitAndCtrl>
	DelayMs(3);
 8000760:	2003      	movs	r0, #3
 8000762:	f7ff ff49 	bl	80005f8 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_4BIT | BV(LCD_EN));
 8000766:	2024      	movs	r0, #36	@ 0x24
 8000768:	f7ff ff6e 	bl	8000648 <Lcd_Write4BitAndCtrl>
	__NOP();
 800076c:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_4BIT);
 800076e:	2020      	movs	r0, #32
 8000770:	f7ff ff6a 	bl	8000648 <Lcd_Write4BitAndCtrl>
	DelayMs(3);
 8000774:	2003      	movs	r0, #3
 8000776:	f7ff ff3f 	bl	80005f8 <DelayMs>

	// lcd initialization
	Lcd_WriteByte(LCD_CMD, LCD_FN_SET_4BIT_2LINES);
 800077a:	2128      	movs	r1, #40	@ 0x28
 800077c:	2080      	movs	r0, #128	@ 0x80
 800077e:	f7ff ff77 	bl	8000670 <Lcd_WriteByte>
	DelayMs(1);
 8000782:	2001      	movs	r0, #1
 8000784:	f7ff ff38 	bl	80005f8 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_DISP_CTRL);
 8000788:	2108      	movs	r1, #8
 800078a:	2080      	movs	r0, #128	@ 0x80
 800078c:	f7ff ff70 	bl	8000670 <Lcd_WriteByte>
	DelayMs(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff ff31 	bl	80005f8 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_CLEAR);
 8000796:	2101      	movs	r1, #1
 8000798:	2080      	movs	r0, #128	@ 0x80
 800079a:	f7ff ff69 	bl	8000670 <Lcd_WriteByte>
	DelayMs(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff ff2a 	bl	80005f8 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_ENTRY_MODE);
 80007a4:	2106      	movs	r1, #6
 80007a6:	2080      	movs	r0, #128	@ 0x80
 80007a8:	f7ff ff62 	bl	8000670 <Lcd_WriteByte>
	DelayMs(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff ff23 	bl	80005f8 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_DISP_ON);
 80007b2:	210c      	movs	r1, #12
 80007b4:	2080      	movs	r0, #128	@ 0x80
 80007b6:	f7ff ff5b 	bl	8000670 <Lcd_WriteByte>
	DelayMs(1);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff ff1c 	bl	80005f8 <DelayMs>
	return ret;
 80007c0:	687b      	ldr	r3, [r7, #4]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <Lcd_Puts>:

void Lcd_Puts(uint8_t line, char str[]) {
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b084      	sub	sp, #16
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	6039      	str	r1, [r7, #0]
 80007d4:	71fb      	strb	r3, [r7, #7]
	int i;
	Lcd_WriteByte(LCD_CMD, line); // line address
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4619      	mov	r1, r3
 80007da:	2080      	movs	r0, #128	@ 0x80
 80007dc:	f7ff ff48 	bl	8000670 <Lcd_WriteByte>
	DelayMs(1);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff ff09 	bl	80005f8 <DelayMs>
	for(i=0; str[i]!='\0'; i++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	e00a      	b.n	8000802 <Lcd_Puts+0x38>
		Lcd_WriteByte(LCD_DATA, str[i]);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff ff3a 	bl	8000670 <Lcd_WriteByte>
	for(i=0; str[i]!='\0'; i++)
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	3301      	adds	r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	683a      	ldr	r2, [r7, #0]
 8000806:	4413      	add	r3, r2
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1ee      	bne.n	80007ec <Lcd_Puts+0x22>
}
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000820:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <DelayMs+0x44>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <DelayMs+0x48>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a0e      	ldr	r2, [pc, #56]	@ (8000864 <DelayMs+0x4c>)
 800082c:	fba2 2303 	umull	r2, r3, r2, r3
 8000830:	099b      	lsrs	r3, r3, #6
 8000832:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	fb02 f303 	mul.w	r3, r2, r3
 800083c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800083e:	bf00      	nop
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <DelayMs+0x44>)
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	1ad2      	subs	r2, r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	429a      	cmp	r2, r3
 800084c:	d3f8      	bcc.n	8000840 <DelayMs+0x28>
}
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e0001000 	.word	0xe0001000
 8000860:	20000000 	.word	0x20000000
 8000864:	10624dd3 	.word	0x10624dd3

08000868 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	@ 0x30
 800086c:	af02      	add	r7, sp, #8
		char str[32];
		SystemInit();
 800086e:	f000 f913 	bl	8000a98 <SystemInit>
		LIS_Data val;
		LIS_Init();
 8000872:	f7ff fd7b 	bl	800036c <LIS_Init>
		Lcd_Init();
 8000876:	f7ff ff43 	bl	8000700 <Lcd_Init>
		while(1) {
					if(LIS_IsDataAvail()) // check if new data avail
 800087a:	f7ff fd8b 	bl	8000394 <LIS_IsDataAvail>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d018      	beq.n	80008b6 <main+0x4e>
					{
						val = LIS_GetData(); // get the new data
 8000884:	463b      	mov	r3, r7
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fd97 	bl	80003ba <LIS_GetData>
						// print value
						sprintf(str, "X=%d,Y=%d,Z=%d\r\n", val.x, val.y, val.z);
 800088c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000890:	461a      	mov	r2, r3
 8000892:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000896:	4619      	mov	r1, r3
 8000898:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800089c:	f107 0008 	add.w	r0, r7, #8
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	460b      	mov	r3, r1
 80008a4:	4906      	ldr	r1, [pc, #24]	@ (80008c0 <main+0x58>)
 80008a6:	f000 f957 	bl	8000b58 <siprintf>
						Lcd_Puts(LCD_LINE1,str);
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	4619      	mov	r1, r3
 80008b0:	2080      	movs	r0, #128	@ 0x80
 80008b2:	f7ff ff8a 	bl	80007ca <Lcd_Puts>
					}
					DelayMs(1000);
 80008b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ba:	f7ff ffad 	bl	8000818 <DelayMs>
					if(LIS_IsDataAvail()) // check if new data avail
 80008be:	e7dc      	b.n	800087a <main+0x12>
 80008c0:	080014a0 	.word	0x080014a0

080008c4 <SPI_Init>:
Date: Sep 25, 2024
*/

#include "spi.h"

void SPI_Init(void) {
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
	// GPIOE (CS) initialization
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80008c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000984 <SPI_Init+0xc0>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000984 <SPI_Init+0xc0>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	6313      	str	r3, [r2, #48]	@ 0x30
	// GPIOE.3 -- mode as output
	GPIOE->MODER |= BV(SPI_CS_PIN*2);
 80008d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000988 <SPI_Init+0xc4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a2b      	ldr	r2, [pc, #172]	@ (8000988 <SPI_Init+0xc4>)
 80008da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008de:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~BV(SPI_CS_PIN*2+1);
 80008e0:	4b29      	ldr	r3, [pc, #164]	@ (8000988 <SPI_Init+0xc4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a28      	ldr	r2, [pc, #160]	@ (8000988 <SPI_Init+0xc4>)
 80008e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80008ea:	6013      	str	r3, [r2, #0]
	// set OSPEEDR=00 (low speed)
	GPIOE->OSPEEDR &= ~(BV(SPI_CS_PIN*2+1) | BV(SPI_CS_PIN*2));
 80008ec:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <SPI_Init+0xc4>)
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	4a25      	ldr	r2, [pc, #148]	@ (8000988 <SPI_Init+0xc4>)
 80008f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80008f6:	6093      	str	r3, [r2, #8]
	// set OTYPER=0 (push-pull)
	GPIOE->OTYPER &= ~BV(SPI_CS_PIN);
 80008f8:	4b23      	ldr	r3, [pc, #140]	@ (8000988 <SPI_Init+0xc4>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	4a22      	ldr	r2, [pc, #136]	@ (8000988 <SPI_Init+0xc4>)
 80008fe:	f023 0308 	bic.w	r3, r3, #8
 8000902:	6053      	str	r3, [r2, #4]
	// set PUPDR=00 (no pull up and no pull down)
	GPIOE->PUPDR &= ~(BV(SPI_CS_PIN*2+1) | BV(SPI_CS_PIN*2));
 8000904:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <SPI_Init+0xc4>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	4a1f      	ldr	r2, [pc, #124]	@ (8000988 <SPI_Init+0xc4>)
 800090a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800090e:	60d3      	str	r3, [r2, #12]

	// GPIOA (SPI) initialization
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000910:	4b1c      	ldr	r3, [pc, #112]	@ (8000984 <SPI_Init+0xc0>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000914:	4a1b      	ldr	r2, [pc, #108]	@ (8000984 <SPI_Init+0xc0>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6313      	str	r3, [r2, #48]	@ 0x30
	// GPIOA.5,6,7 -- mode as alt fn (10)
	GPIOA->MODER &= ~(BV(SPI_SCLK_PIN*2) | BV(SPI_MOSI_PIN*2) | BV(SPI_MISO_PIN*2));
 800091c:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <SPI_Init+0xc8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a1a      	ldr	r2, [pc, #104]	@ (800098c <SPI_Init+0xc8>)
 8000922:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 8000926:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= BV(SPI_SCLK_PIN*2+1) | BV(SPI_MOSI_PIN*2+1) | BV(SPI_MISO_PIN*2+1);
 8000928:	4b18      	ldr	r3, [pc, #96]	@ (800098c <SPI_Init+0xc8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a17      	ldr	r2, [pc, #92]	@ (800098c <SPI_Init+0xc8>)
 800092e:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000932:	6013      	str	r3, [r2, #0]
	// GPIOA.5,6,7 -- AFRL - AF5 - 0101
	GPIOA->AFR[0] |= BV(30) | BV(28) | BV(26) | BV(24) | BV(22) | BV(20);
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <SPI_Init+0xc8>)
 8000936:	6a1b      	ldr	r3, [r3, #32]
 8000938:	4a14      	ldr	r2, [pc, #80]	@ (800098c <SPI_Init+0xc8>)
 800093a:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 800093e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000942:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(BV(31) | BV(29) | BV(27) | BV(25) | BV(23) | BV(21));
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <SPI_Init+0xc8>)
 8000946:	6a1b      	ldr	r3, [r3, #32]
 8000948:	4a10      	ldr	r2, [pc, #64]	@ (800098c <SPI_Init+0xc8>)
 800094a:	f023 432a 	bic.w	r3, r3, #2852126720	@ 0xaa000000
 800094e:	f423 0320 	bic.w	r3, r3, #10485760	@ 0xa00000
 8000952:	6213      	str	r3, [r2, #32]

	// SPI initialization
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000954:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <SPI_Init+0xc0>)
 8000956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000958:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <SPI_Init+0xc0>)
 800095a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800095e:	6453      	str	r3, [r2, #68]	@ 0x44
	// CR1 -- Master mode, Software Slave Select, Bit Rate = 010 (16MHz/8=2MHz)
	//		MSBFirst (LSBF=0), SPI Mode 0 (CPOL=0, CPHA=0), 8-bit data (DFF=0)
	SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_BR_1;
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <SPI_Init+0xcc>)
 8000962:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8000966:	601a      	str	r2, [r3, #0]
	// CR2 -- disable interrupts and dma
	SPI1->CR2 = 0x0000;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <SPI_Init+0xcc>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
	// CR1 -- Enable SPI
	SPI1->CR1 |= SPI_CR1_SPE;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <SPI_Init+0xcc>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <SPI_Init+0xcc>)
 8000974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000978:	6013      	str	r3, [r2, #0]
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40021000 	.word	0x40021000
 800098c:	40020000 	.word	0x40020000
 8000990:	40013000 	.word	0x40013000

08000994 <SPI_CS_Enable>:

void SPI_CS_Enable(void) {
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	// GPIOE.3 = 0
	GPIOE->ODR &= ~BV(SPI_CS_PIN);
 8000998:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <SPI_CS_Enable+0x18>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	4a03      	ldr	r2, [pc, #12]	@ (80009ac <SPI_CS_Enable+0x18>)
 800099e:	f023 0308 	bic.w	r3, r3, #8
 80009a2:	6153      	str	r3, [r2, #20]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	40021000 	.word	0x40021000

080009b0 <SPI_CS_Disable>:

void SPI_CS_Disable(void) {
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	// GPIOE.3 = 1
	GPIOE->ODR |= BV(SPI_CS_PIN);
 80009b4:	4b04      	ldr	r3, [pc, #16]	@ (80009c8 <SPI_CS_Disable+0x18>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	4a03      	ldr	r2, [pc, #12]	@ (80009c8 <SPI_CS_Disable+0x18>)
 80009ba:	f043 0308 	orr.w	r3, r3, #8
 80009be:	6153      	str	r3, [r2, #20]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	40021000 	.word	0x40021000

080009cc <SPI_Transmit>:

uint16_t SPI_Transmit(uint16_t val) {
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	80fb      	strh	r3, [r7, #6]
	// wait until previous data is transmitted (txe)
	while(!(SPI1->SR & SPI_SR_TXE));
 80009d6:	bf00      	nop
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <SPI_Transmit+0x40>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0f9      	beq.n	80009d8 <SPI_Transmit+0xc>
	// write data into DR
	SPI1->DR = val;
 80009e4:	4a09      	ldr	r2, [pc, #36]	@ (8000a0c <SPI_Transmit+0x40>)
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	60d3      	str	r3, [r2, #12]
	// wait until new data is received (rxne)
	while(!(SPI1->SR & SPI_SR_RXNE));
 80009ea:	bf00      	nop
 80009ec:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <SPI_Transmit+0x40>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f9      	beq.n	80009ec <SPI_Transmit+0x20>
	// read data from DR
	val = SPI1->DR;
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <SPI_Transmit+0x40>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	80fb      	strh	r3, [r7, #6]
	// return data
	return val;
 80009fe:	88fb      	ldrh	r3, [r7, #6]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40013000 	.word	0x40013000

08000a10 <SPI_Receive>:

uint16_t SPI_Receive(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
	uint16_t val = SPI_Transmit(0x00);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff ffd8 	bl	80009cc <SPI_Transmit>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	80fb      	strh	r3, [r7, #6]
	return val;
 8000a20:	88fb      	ldrh	r3, [r7, #6]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a34:	4a14      	ldr	r2, [pc, #80]	@ (8000a88 <_sbrk+0x5c>)
 8000a36:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <_sbrk+0x60>)
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a40:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d102      	bne.n	8000a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <_sbrk+0x64>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <_sbrk+0x68>)
 8000a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <_sbrk+0x64>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d207      	bcs.n	8000a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a5c:	f000 f89c 	bl	8000b98 <__errno>
 8000a60:	4603      	mov	r3, r0
 8000a62:	220c      	movs	r2, #12
 8000a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a6a:	e009      	b.n	8000a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a72:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a05      	ldr	r2, [pc, #20]	@ (8000a90 <_sbrk+0x64>)
 8000a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20020000 	.word	0x20020000
 8000a8c:	00000400 	.word	0x00000400
 8000a90:	20000070 	.word	0x20000070
 8000a94:	200001c0 	.word	0x200001c0

08000a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  DWT_Init();
 8000a9c:	f000 f802 	bl	8000aa4 <DWT_Init>
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <DWT_Init+0x58>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	4a13      	ldr	r2, [pc, #76]	@ (8000afc <DWT_Init+0x58>)
 8000aae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000ab2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <DWT_Init+0x58>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	4a10      	ldr	r2, [pc, #64]	@ (8000afc <DWT_Init+0x58>)
 8000aba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000abe:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <DWT_Init+0x5c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	@ (8000b00 <DWT_Init+0x5c>)
 8000ac6:	f023 0301 	bic.w	r3, r3, #1
 8000aca:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <DWT_Init+0x5c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <DWT_Init+0x5c>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <DWT_Init+0x5c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000ade:	bf00      	nop
    __ASM volatile ("NOP");
 8000ae0:	bf00      	nop
    __ASM volatile ("NOP");
 8000ae2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <DWT_Init+0x5c>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	bf0c      	ite	eq
 8000aec:	2301      	moveq	r3, #1
 8000aee:	2300      	movne	r3, #0
 8000af0:	b2db      	uxtb	r3, r3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000edf0 	.word	0xe000edf0
 8000b00:	e0001000 	.word	0xe0001000

08000b04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b04:	480d      	ldr	r0, [pc, #52]	@ (8000b3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b08:	f7ff ffc6 	bl	8000a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	@ (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	@ (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b32:	f000 f837 	bl	8000ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b36:	f7ff fe97 	bl	8000868 <main>

08000b3a <LoopForever>:

LoopForever:
  b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   r0, =_estack
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000b48:	080014f4 	.word	0x080014f4
  ldr r2, =_sbss
 8000b4c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000b50:	200001bc 	.word	0x200001bc

08000b54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <siprintf>:
 8000b58:	b40e      	push	{r1, r2, r3}
 8000b5a:	b500      	push	{lr}
 8000b5c:	b09c      	sub	sp, #112	@ 0x70
 8000b5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8000b60:	9002      	str	r0, [sp, #8]
 8000b62:	9006      	str	r0, [sp, #24]
 8000b64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000b68:	4809      	ldr	r0, [pc, #36]	@ (8000b90 <siprintf+0x38>)
 8000b6a:	9107      	str	r1, [sp, #28]
 8000b6c:	9104      	str	r1, [sp, #16]
 8000b6e:	4909      	ldr	r1, [pc, #36]	@ (8000b94 <siprintf+0x3c>)
 8000b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b74:	9105      	str	r1, [sp, #20]
 8000b76:	6800      	ldr	r0, [r0, #0]
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	a902      	add	r1, sp, #8
 8000b7c:	f000 f98c 	bl	8000e98 <_svfiprintf_r>
 8000b80:	9b02      	ldr	r3, [sp, #8]
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	b01c      	add	sp, #112	@ 0x70
 8000b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b8c:	b003      	add	sp, #12
 8000b8e:	4770      	bx	lr
 8000b90:	20000004 	.word	0x20000004
 8000b94:	ffff0208 	.word	0xffff0208

08000b98 <__errno>:
 8000b98:	4b01      	ldr	r3, [pc, #4]	@ (8000ba0 <__errno+0x8>)
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <__libc_init_array>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8000bdc <__libc_init_array+0x38>)
 8000ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8000be0 <__libc_init_array+0x3c>)
 8000baa:	1b64      	subs	r4, r4, r5
 8000bac:	10a4      	asrs	r4, r4, #2
 8000bae:	2600      	movs	r6, #0
 8000bb0:	42a6      	cmp	r6, r4
 8000bb2:	d109      	bne.n	8000bc8 <__libc_init_array+0x24>
 8000bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8000be4 <__libc_init_array+0x40>)
 8000bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8000be8 <__libc_init_array+0x44>)
 8000bb8:	f000 fc66 	bl	8001488 <_init>
 8000bbc:	1b64      	subs	r4, r4, r5
 8000bbe:	10a4      	asrs	r4, r4, #2
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	42a6      	cmp	r6, r4
 8000bc4:	d105      	bne.n	8000bd2 <__libc_init_array+0x2e>
 8000bc6:	bd70      	pop	{r4, r5, r6, pc}
 8000bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bcc:	4798      	blx	r3
 8000bce:	3601      	adds	r6, #1
 8000bd0:	e7ee      	b.n	8000bb0 <__libc_init_array+0xc>
 8000bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bd6:	4798      	blx	r3
 8000bd8:	3601      	adds	r6, #1
 8000bda:	e7f2      	b.n	8000bc2 <__libc_init_array+0x1e>
 8000bdc:	080014ec 	.word	0x080014ec
 8000be0:	080014ec 	.word	0x080014ec
 8000be4:	080014ec 	.word	0x080014ec
 8000be8:	080014f0 	.word	0x080014f0

08000bec <__retarget_lock_acquire_recursive>:
 8000bec:	4770      	bx	lr

08000bee <__retarget_lock_release_recursive>:
 8000bee:	4770      	bx	lr

08000bf0 <_free_r>:
 8000bf0:	b538      	push	{r3, r4, r5, lr}
 8000bf2:	4605      	mov	r5, r0
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	d041      	beq.n	8000c7c <_free_r+0x8c>
 8000bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bfc:	1f0c      	subs	r4, r1, #4
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bfb8      	it	lt
 8000c02:	18e4      	addlt	r4, r4, r3
 8000c04:	f000 f8e0 	bl	8000dc8 <__malloc_lock>
 8000c08:	4a1d      	ldr	r2, [pc, #116]	@ (8000c80 <_free_r+0x90>)
 8000c0a:	6813      	ldr	r3, [r2, #0]
 8000c0c:	b933      	cbnz	r3, 8000c1c <_free_r+0x2c>
 8000c0e:	6063      	str	r3, [r4, #4]
 8000c10:	6014      	str	r4, [r2, #0]
 8000c12:	4628      	mov	r0, r5
 8000c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c18:	f000 b8dc 	b.w	8000dd4 <__malloc_unlock>
 8000c1c:	42a3      	cmp	r3, r4
 8000c1e:	d908      	bls.n	8000c32 <_free_r+0x42>
 8000c20:	6820      	ldr	r0, [r4, #0]
 8000c22:	1821      	adds	r1, r4, r0
 8000c24:	428b      	cmp	r3, r1
 8000c26:	bf01      	itttt	eq
 8000c28:	6819      	ldreq	r1, [r3, #0]
 8000c2a:	685b      	ldreq	r3, [r3, #4]
 8000c2c:	1809      	addeq	r1, r1, r0
 8000c2e:	6021      	streq	r1, [r4, #0]
 8000c30:	e7ed      	b.n	8000c0e <_free_r+0x1e>
 8000c32:	461a      	mov	r2, r3
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	b10b      	cbz	r3, 8000c3c <_free_r+0x4c>
 8000c38:	42a3      	cmp	r3, r4
 8000c3a:	d9fa      	bls.n	8000c32 <_free_r+0x42>
 8000c3c:	6811      	ldr	r1, [r2, #0]
 8000c3e:	1850      	adds	r0, r2, r1
 8000c40:	42a0      	cmp	r0, r4
 8000c42:	d10b      	bne.n	8000c5c <_free_r+0x6c>
 8000c44:	6820      	ldr	r0, [r4, #0]
 8000c46:	4401      	add	r1, r0
 8000c48:	1850      	adds	r0, r2, r1
 8000c4a:	4283      	cmp	r3, r0
 8000c4c:	6011      	str	r1, [r2, #0]
 8000c4e:	d1e0      	bne.n	8000c12 <_free_r+0x22>
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	6053      	str	r3, [r2, #4]
 8000c56:	4408      	add	r0, r1
 8000c58:	6010      	str	r0, [r2, #0]
 8000c5a:	e7da      	b.n	8000c12 <_free_r+0x22>
 8000c5c:	d902      	bls.n	8000c64 <_free_r+0x74>
 8000c5e:	230c      	movs	r3, #12
 8000c60:	602b      	str	r3, [r5, #0]
 8000c62:	e7d6      	b.n	8000c12 <_free_r+0x22>
 8000c64:	6820      	ldr	r0, [r4, #0]
 8000c66:	1821      	adds	r1, r4, r0
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	bf04      	itt	eq
 8000c6c:	6819      	ldreq	r1, [r3, #0]
 8000c6e:	685b      	ldreq	r3, [r3, #4]
 8000c70:	6063      	str	r3, [r4, #4]
 8000c72:	bf04      	itt	eq
 8000c74:	1809      	addeq	r1, r1, r0
 8000c76:	6021      	streq	r1, [r4, #0]
 8000c78:	6054      	str	r4, [r2, #4]
 8000c7a:	e7ca      	b.n	8000c12 <_free_r+0x22>
 8000c7c:	bd38      	pop	{r3, r4, r5, pc}
 8000c7e:	bf00      	nop
 8000c80:	200001b8 	.word	0x200001b8

08000c84 <sbrk_aligned>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	4e0f      	ldr	r6, [pc, #60]	@ (8000cc4 <sbrk_aligned+0x40>)
 8000c88:	460c      	mov	r4, r1
 8000c8a:	6831      	ldr	r1, [r6, #0]
 8000c8c:	4605      	mov	r5, r0
 8000c8e:	b911      	cbnz	r1, 8000c96 <sbrk_aligned+0x12>
 8000c90:	f000 fba6 	bl	80013e0 <_sbrk_r>
 8000c94:	6030      	str	r0, [r6, #0]
 8000c96:	4621      	mov	r1, r4
 8000c98:	4628      	mov	r0, r5
 8000c9a:	f000 fba1 	bl	80013e0 <_sbrk_r>
 8000c9e:	1c43      	adds	r3, r0, #1
 8000ca0:	d103      	bne.n	8000caa <sbrk_aligned+0x26>
 8000ca2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	bd70      	pop	{r4, r5, r6, pc}
 8000caa:	1cc4      	adds	r4, r0, #3
 8000cac:	f024 0403 	bic.w	r4, r4, #3
 8000cb0:	42a0      	cmp	r0, r4
 8000cb2:	d0f8      	beq.n	8000ca6 <sbrk_aligned+0x22>
 8000cb4:	1a21      	subs	r1, r4, r0
 8000cb6:	4628      	mov	r0, r5
 8000cb8:	f000 fb92 	bl	80013e0 <_sbrk_r>
 8000cbc:	3001      	adds	r0, #1
 8000cbe:	d1f2      	bne.n	8000ca6 <sbrk_aligned+0x22>
 8000cc0:	e7ef      	b.n	8000ca2 <sbrk_aligned+0x1e>
 8000cc2:	bf00      	nop
 8000cc4:	200001b4 	.word	0x200001b4

08000cc8 <_malloc_r>:
 8000cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ccc:	1ccd      	adds	r5, r1, #3
 8000cce:	f025 0503 	bic.w	r5, r5, #3
 8000cd2:	3508      	adds	r5, #8
 8000cd4:	2d0c      	cmp	r5, #12
 8000cd6:	bf38      	it	cc
 8000cd8:	250c      	movcc	r5, #12
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	4606      	mov	r6, r0
 8000cde:	db01      	blt.n	8000ce4 <_malloc_r+0x1c>
 8000ce0:	42a9      	cmp	r1, r5
 8000ce2:	d904      	bls.n	8000cee <_malloc_r+0x26>
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	6033      	str	r3, [r6, #0]
 8000ce8:	2000      	movs	r0, #0
 8000cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000dc4 <_malloc_r+0xfc>
 8000cf2:	f000 f869 	bl	8000dc8 <__malloc_lock>
 8000cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8000cfa:	461c      	mov	r4, r3
 8000cfc:	bb44      	cbnz	r4, 8000d50 <_malloc_r+0x88>
 8000cfe:	4629      	mov	r1, r5
 8000d00:	4630      	mov	r0, r6
 8000d02:	f7ff ffbf 	bl	8000c84 <sbrk_aligned>
 8000d06:	1c43      	adds	r3, r0, #1
 8000d08:	4604      	mov	r4, r0
 8000d0a:	d158      	bne.n	8000dbe <_malloc_r+0xf6>
 8000d0c:	f8d8 4000 	ldr.w	r4, [r8]
 8000d10:	4627      	mov	r7, r4
 8000d12:	2f00      	cmp	r7, #0
 8000d14:	d143      	bne.n	8000d9e <_malloc_r+0xd6>
 8000d16:	2c00      	cmp	r4, #0
 8000d18:	d04b      	beq.n	8000db2 <_malloc_r+0xea>
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	4630      	mov	r0, r6
 8000d20:	eb04 0903 	add.w	r9, r4, r3
 8000d24:	f000 fb5c 	bl	80013e0 <_sbrk_r>
 8000d28:	4581      	cmp	r9, r0
 8000d2a:	d142      	bne.n	8000db2 <_malloc_r+0xea>
 8000d2c:	6821      	ldr	r1, [r4, #0]
 8000d2e:	1a6d      	subs	r5, r5, r1
 8000d30:	4629      	mov	r1, r5
 8000d32:	4630      	mov	r0, r6
 8000d34:	f7ff ffa6 	bl	8000c84 <sbrk_aligned>
 8000d38:	3001      	adds	r0, #1
 8000d3a:	d03a      	beq.n	8000db2 <_malloc_r+0xea>
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	442b      	add	r3, r5
 8000d40:	6023      	str	r3, [r4, #0]
 8000d42:	f8d8 3000 	ldr.w	r3, [r8]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	bb62      	cbnz	r2, 8000da4 <_malloc_r+0xdc>
 8000d4a:	f8c8 7000 	str.w	r7, [r8]
 8000d4e:	e00f      	b.n	8000d70 <_malloc_r+0xa8>
 8000d50:	6822      	ldr	r2, [r4, #0]
 8000d52:	1b52      	subs	r2, r2, r5
 8000d54:	d420      	bmi.n	8000d98 <_malloc_r+0xd0>
 8000d56:	2a0b      	cmp	r2, #11
 8000d58:	d917      	bls.n	8000d8a <_malloc_r+0xc2>
 8000d5a:	1961      	adds	r1, r4, r5
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	6025      	str	r5, [r4, #0]
 8000d60:	bf18      	it	ne
 8000d62:	6059      	strne	r1, [r3, #4]
 8000d64:	6863      	ldr	r3, [r4, #4]
 8000d66:	bf08      	it	eq
 8000d68:	f8c8 1000 	streq.w	r1, [r8]
 8000d6c:	5162      	str	r2, [r4, r5]
 8000d6e:	604b      	str	r3, [r1, #4]
 8000d70:	4630      	mov	r0, r6
 8000d72:	f000 f82f 	bl	8000dd4 <__malloc_unlock>
 8000d76:	f104 000b 	add.w	r0, r4, #11
 8000d7a:	1d23      	adds	r3, r4, #4
 8000d7c:	f020 0007 	bic.w	r0, r0, #7
 8000d80:	1ac2      	subs	r2, r0, r3
 8000d82:	bf1c      	itt	ne
 8000d84:	1a1b      	subne	r3, r3, r0
 8000d86:	50a3      	strne	r3, [r4, r2]
 8000d88:	e7af      	b.n	8000cea <_malloc_r+0x22>
 8000d8a:	6862      	ldr	r2, [r4, #4]
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	bf0c      	ite	eq
 8000d90:	f8c8 2000 	streq.w	r2, [r8]
 8000d94:	605a      	strne	r2, [r3, #4]
 8000d96:	e7eb      	b.n	8000d70 <_malloc_r+0xa8>
 8000d98:	4623      	mov	r3, r4
 8000d9a:	6864      	ldr	r4, [r4, #4]
 8000d9c:	e7ae      	b.n	8000cfc <_malloc_r+0x34>
 8000d9e:	463c      	mov	r4, r7
 8000da0:	687f      	ldr	r7, [r7, #4]
 8000da2:	e7b6      	b.n	8000d12 <_malloc_r+0x4a>
 8000da4:	461a      	mov	r2, r3
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	42a3      	cmp	r3, r4
 8000daa:	d1fb      	bne.n	8000da4 <_malloc_r+0xdc>
 8000dac:	2300      	movs	r3, #0
 8000dae:	6053      	str	r3, [r2, #4]
 8000db0:	e7de      	b.n	8000d70 <_malloc_r+0xa8>
 8000db2:	230c      	movs	r3, #12
 8000db4:	6033      	str	r3, [r6, #0]
 8000db6:	4630      	mov	r0, r6
 8000db8:	f000 f80c 	bl	8000dd4 <__malloc_unlock>
 8000dbc:	e794      	b.n	8000ce8 <_malloc_r+0x20>
 8000dbe:	6005      	str	r5, [r0, #0]
 8000dc0:	e7d6      	b.n	8000d70 <_malloc_r+0xa8>
 8000dc2:	bf00      	nop
 8000dc4:	200001b8 	.word	0x200001b8

08000dc8 <__malloc_lock>:
 8000dc8:	4801      	ldr	r0, [pc, #4]	@ (8000dd0 <__malloc_lock+0x8>)
 8000dca:	f7ff bf0f 	b.w	8000bec <__retarget_lock_acquire_recursive>
 8000dce:	bf00      	nop
 8000dd0:	200001b0 	.word	0x200001b0

08000dd4 <__malloc_unlock>:
 8000dd4:	4801      	ldr	r0, [pc, #4]	@ (8000ddc <__malloc_unlock+0x8>)
 8000dd6:	f7ff bf0a 	b.w	8000bee <__retarget_lock_release_recursive>
 8000dda:	bf00      	nop
 8000ddc:	200001b0 	.word	0x200001b0

08000de0 <__ssputs_r>:
 8000de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de4:	688e      	ldr	r6, [r1, #8]
 8000de6:	461f      	mov	r7, r3
 8000de8:	42be      	cmp	r6, r7
 8000dea:	680b      	ldr	r3, [r1, #0]
 8000dec:	4682      	mov	sl, r0
 8000dee:	460c      	mov	r4, r1
 8000df0:	4690      	mov	r8, r2
 8000df2:	d82d      	bhi.n	8000e50 <__ssputs_r+0x70>
 8000df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000df8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000dfc:	d026      	beq.n	8000e4c <__ssputs_r+0x6c>
 8000dfe:	6965      	ldr	r5, [r4, #20]
 8000e00:	6909      	ldr	r1, [r1, #16]
 8000e02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000e06:	eba3 0901 	sub.w	r9, r3, r1
 8000e0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000e0e:	1c7b      	adds	r3, r7, #1
 8000e10:	444b      	add	r3, r9
 8000e12:	106d      	asrs	r5, r5, #1
 8000e14:	429d      	cmp	r5, r3
 8000e16:	bf38      	it	cc
 8000e18:	461d      	movcc	r5, r3
 8000e1a:	0553      	lsls	r3, r2, #21
 8000e1c:	d527      	bpl.n	8000e6e <__ssputs_r+0x8e>
 8000e1e:	4629      	mov	r1, r5
 8000e20:	f7ff ff52 	bl	8000cc8 <_malloc_r>
 8000e24:	4606      	mov	r6, r0
 8000e26:	b360      	cbz	r0, 8000e82 <__ssputs_r+0xa2>
 8000e28:	6921      	ldr	r1, [r4, #16]
 8000e2a:	464a      	mov	r2, r9
 8000e2c:	f000 fae8 	bl	8001400 <memcpy>
 8000e30:	89a3      	ldrh	r3, [r4, #12]
 8000e32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e3a:	81a3      	strh	r3, [r4, #12]
 8000e3c:	6126      	str	r6, [r4, #16]
 8000e3e:	6165      	str	r5, [r4, #20]
 8000e40:	444e      	add	r6, r9
 8000e42:	eba5 0509 	sub.w	r5, r5, r9
 8000e46:	6026      	str	r6, [r4, #0]
 8000e48:	60a5      	str	r5, [r4, #8]
 8000e4a:	463e      	mov	r6, r7
 8000e4c:	42be      	cmp	r6, r7
 8000e4e:	d900      	bls.n	8000e52 <__ssputs_r+0x72>
 8000e50:	463e      	mov	r6, r7
 8000e52:	6820      	ldr	r0, [r4, #0]
 8000e54:	4632      	mov	r2, r6
 8000e56:	4641      	mov	r1, r8
 8000e58:	f000 faa8 	bl	80013ac <memmove>
 8000e5c:	68a3      	ldr	r3, [r4, #8]
 8000e5e:	1b9b      	subs	r3, r3, r6
 8000e60:	60a3      	str	r3, [r4, #8]
 8000e62:	6823      	ldr	r3, [r4, #0]
 8000e64:	4433      	add	r3, r6
 8000e66:	6023      	str	r3, [r4, #0]
 8000e68:	2000      	movs	r0, #0
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	462a      	mov	r2, r5
 8000e70:	f000 fad4 	bl	800141c <_realloc_r>
 8000e74:	4606      	mov	r6, r0
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d1e0      	bne.n	8000e3c <__ssputs_r+0x5c>
 8000e7a:	6921      	ldr	r1, [r4, #16]
 8000e7c:	4650      	mov	r0, sl
 8000e7e:	f7ff feb7 	bl	8000bf0 <_free_r>
 8000e82:	230c      	movs	r3, #12
 8000e84:	f8ca 3000 	str.w	r3, [sl]
 8000e88:	89a3      	ldrh	r3, [r4, #12]
 8000e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e8e:	81a3      	strh	r3, [r4, #12]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e94:	e7e9      	b.n	8000e6a <__ssputs_r+0x8a>
	...

08000e98 <_svfiprintf_r>:
 8000e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e9c:	4698      	mov	r8, r3
 8000e9e:	898b      	ldrh	r3, [r1, #12]
 8000ea0:	061b      	lsls	r3, r3, #24
 8000ea2:	b09d      	sub	sp, #116	@ 0x74
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	460d      	mov	r5, r1
 8000ea8:	4614      	mov	r4, r2
 8000eaa:	d510      	bpl.n	8000ece <_svfiprintf_r+0x36>
 8000eac:	690b      	ldr	r3, [r1, #16]
 8000eae:	b973      	cbnz	r3, 8000ece <_svfiprintf_r+0x36>
 8000eb0:	2140      	movs	r1, #64	@ 0x40
 8000eb2:	f7ff ff09 	bl	8000cc8 <_malloc_r>
 8000eb6:	6028      	str	r0, [r5, #0]
 8000eb8:	6128      	str	r0, [r5, #16]
 8000eba:	b930      	cbnz	r0, 8000eca <_svfiprintf_r+0x32>
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ec4:	b01d      	add	sp, #116	@ 0x74
 8000ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000eca:	2340      	movs	r3, #64	@ 0x40
 8000ecc:	616b      	str	r3, [r5, #20]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ed2:	2320      	movs	r3, #32
 8000ed4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000ed8:	f8cd 800c 	str.w	r8, [sp, #12]
 8000edc:	2330      	movs	r3, #48	@ 0x30
 8000ede:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800107c <_svfiprintf_r+0x1e4>
 8000ee2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ee6:	f04f 0901 	mov.w	r9, #1
 8000eea:	4623      	mov	r3, r4
 8000eec:	469a      	mov	sl, r3
 8000eee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ef2:	b10a      	cbz	r2, 8000ef8 <_svfiprintf_r+0x60>
 8000ef4:	2a25      	cmp	r2, #37	@ 0x25
 8000ef6:	d1f9      	bne.n	8000eec <_svfiprintf_r+0x54>
 8000ef8:	ebba 0b04 	subs.w	fp, sl, r4
 8000efc:	d00b      	beq.n	8000f16 <_svfiprintf_r+0x7e>
 8000efe:	465b      	mov	r3, fp
 8000f00:	4622      	mov	r2, r4
 8000f02:	4629      	mov	r1, r5
 8000f04:	4638      	mov	r0, r7
 8000f06:	f7ff ff6b 	bl	8000de0 <__ssputs_r>
 8000f0a:	3001      	adds	r0, #1
 8000f0c:	f000 80a7 	beq.w	800105e <_svfiprintf_r+0x1c6>
 8000f10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000f12:	445a      	add	r2, fp
 8000f14:	9209      	str	r2, [sp, #36]	@ 0x24
 8000f16:	f89a 3000 	ldrb.w	r3, [sl]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 809f 	beq.w	800105e <_svfiprintf_r+0x1c6>
 8000f20:	2300      	movs	r3, #0
 8000f22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f2a:	f10a 0a01 	add.w	sl, sl, #1
 8000f2e:	9304      	str	r3, [sp, #16]
 8000f30:	9307      	str	r3, [sp, #28]
 8000f32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000f36:	931a      	str	r3, [sp, #104]	@ 0x68
 8000f38:	4654      	mov	r4, sl
 8000f3a:	2205      	movs	r2, #5
 8000f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f40:	484e      	ldr	r0, [pc, #312]	@ (800107c <_svfiprintf_r+0x1e4>)
 8000f42:	f7ff f945 	bl	80001d0 <memchr>
 8000f46:	9a04      	ldr	r2, [sp, #16]
 8000f48:	b9d8      	cbnz	r0, 8000f82 <_svfiprintf_r+0xea>
 8000f4a:	06d0      	lsls	r0, r2, #27
 8000f4c:	bf44      	itt	mi
 8000f4e:	2320      	movmi	r3, #32
 8000f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000f54:	0711      	lsls	r1, r2, #28
 8000f56:	bf44      	itt	mi
 8000f58:	232b      	movmi	r3, #43	@ 0x2b
 8000f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8000f62:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f64:	d015      	beq.n	8000f92 <_svfiprintf_r+0xfa>
 8000f66:	9a07      	ldr	r2, [sp, #28]
 8000f68:	4654      	mov	r4, sl
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f04f 0c0a 	mov.w	ip, #10
 8000f70:	4621      	mov	r1, r4
 8000f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f76:	3b30      	subs	r3, #48	@ 0x30
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	d94b      	bls.n	8001014 <_svfiprintf_r+0x17c>
 8000f7c:	b1b0      	cbz	r0, 8000fac <_svfiprintf_r+0x114>
 8000f7e:	9207      	str	r2, [sp, #28]
 8000f80:	e014      	b.n	8000fac <_svfiprintf_r+0x114>
 8000f82:	eba0 0308 	sub.w	r3, r0, r8
 8000f86:	fa09 f303 	lsl.w	r3, r9, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	9304      	str	r3, [sp, #16]
 8000f8e:	46a2      	mov	sl, r4
 8000f90:	e7d2      	b.n	8000f38 <_svfiprintf_r+0xa0>
 8000f92:	9b03      	ldr	r3, [sp, #12]
 8000f94:	1d19      	adds	r1, r3, #4
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	9103      	str	r1, [sp, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	bfbb      	ittet	lt
 8000f9e:	425b      	neglt	r3, r3
 8000fa0:	f042 0202 	orrlt.w	r2, r2, #2
 8000fa4:	9307      	strge	r3, [sp, #28]
 8000fa6:	9307      	strlt	r3, [sp, #28]
 8000fa8:	bfb8      	it	lt
 8000faa:	9204      	strlt	r2, [sp, #16]
 8000fac:	7823      	ldrb	r3, [r4, #0]
 8000fae:	2b2e      	cmp	r3, #46	@ 0x2e
 8000fb0:	d10a      	bne.n	8000fc8 <_svfiprintf_r+0x130>
 8000fb2:	7863      	ldrb	r3, [r4, #1]
 8000fb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000fb6:	d132      	bne.n	800101e <_svfiprintf_r+0x186>
 8000fb8:	9b03      	ldr	r3, [sp, #12]
 8000fba:	1d1a      	adds	r2, r3, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	9203      	str	r2, [sp, #12]
 8000fc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000fc4:	3402      	adds	r4, #2
 8000fc6:	9305      	str	r3, [sp, #20]
 8000fc8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001080 <_svfiprintf_r+0x1e8>
 8000fcc:	7821      	ldrb	r1, [r4, #0]
 8000fce:	2203      	movs	r2, #3
 8000fd0:	4650      	mov	r0, sl
 8000fd2:	f7ff f8fd 	bl	80001d0 <memchr>
 8000fd6:	b138      	cbz	r0, 8000fe8 <_svfiprintf_r+0x150>
 8000fd8:	9b04      	ldr	r3, [sp, #16]
 8000fda:	eba0 000a 	sub.w	r0, r0, sl
 8000fde:	2240      	movs	r2, #64	@ 0x40
 8000fe0:	4082      	lsls	r2, r0
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	3401      	adds	r4, #1
 8000fe6:	9304      	str	r3, [sp, #16]
 8000fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fec:	4825      	ldr	r0, [pc, #148]	@ (8001084 <_svfiprintf_r+0x1ec>)
 8000fee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ff2:	2206      	movs	r2, #6
 8000ff4:	f7ff f8ec 	bl	80001d0 <memchr>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d036      	beq.n	800106a <_svfiprintf_r+0x1d2>
 8000ffc:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <_svfiprintf_r+0x1f0>)
 8000ffe:	bb1b      	cbnz	r3, 8001048 <_svfiprintf_r+0x1b0>
 8001000:	9b03      	ldr	r3, [sp, #12]
 8001002:	3307      	adds	r3, #7
 8001004:	f023 0307 	bic.w	r3, r3, #7
 8001008:	3308      	adds	r3, #8
 800100a:	9303      	str	r3, [sp, #12]
 800100c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800100e:	4433      	add	r3, r6
 8001010:	9309      	str	r3, [sp, #36]	@ 0x24
 8001012:	e76a      	b.n	8000eea <_svfiprintf_r+0x52>
 8001014:	fb0c 3202 	mla	r2, ip, r2, r3
 8001018:	460c      	mov	r4, r1
 800101a:	2001      	movs	r0, #1
 800101c:	e7a8      	b.n	8000f70 <_svfiprintf_r+0xd8>
 800101e:	2300      	movs	r3, #0
 8001020:	3401      	adds	r4, #1
 8001022:	9305      	str	r3, [sp, #20]
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 0c0a 	mov.w	ip, #10
 800102a:	4620      	mov	r0, r4
 800102c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001030:	3a30      	subs	r2, #48	@ 0x30
 8001032:	2a09      	cmp	r2, #9
 8001034:	d903      	bls.n	800103e <_svfiprintf_r+0x1a6>
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0c6      	beq.n	8000fc8 <_svfiprintf_r+0x130>
 800103a:	9105      	str	r1, [sp, #20]
 800103c:	e7c4      	b.n	8000fc8 <_svfiprintf_r+0x130>
 800103e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001042:	4604      	mov	r4, r0
 8001044:	2301      	movs	r3, #1
 8001046:	e7f0      	b.n	800102a <_svfiprintf_r+0x192>
 8001048:	ab03      	add	r3, sp, #12
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	462a      	mov	r2, r5
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <_svfiprintf_r+0x1f4>)
 8001050:	a904      	add	r1, sp, #16
 8001052:	4638      	mov	r0, r7
 8001054:	f3af 8000 	nop.w
 8001058:	1c42      	adds	r2, r0, #1
 800105a:	4606      	mov	r6, r0
 800105c:	d1d6      	bne.n	800100c <_svfiprintf_r+0x174>
 800105e:	89ab      	ldrh	r3, [r5, #12]
 8001060:	065b      	lsls	r3, r3, #25
 8001062:	f53f af2d 	bmi.w	8000ec0 <_svfiprintf_r+0x28>
 8001066:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001068:	e72c      	b.n	8000ec4 <_svfiprintf_r+0x2c>
 800106a:	ab03      	add	r3, sp, #12
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	462a      	mov	r2, r5
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <_svfiprintf_r+0x1f4>)
 8001072:	a904      	add	r1, sp, #16
 8001074:	4638      	mov	r0, r7
 8001076:	f000 f879 	bl	800116c <_printf_i>
 800107a:	e7ed      	b.n	8001058 <_svfiprintf_r+0x1c0>
 800107c:	080014b1 	.word	0x080014b1
 8001080:	080014b7 	.word	0x080014b7
 8001084:	080014bb 	.word	0x080014bb
 8001088:	00000000 	.word	0x00000000
 800108c:	08000de1 	.word	0x08000de1

08001090 <_printf_common>:
 8001090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001094:	4616      	mov	r6, r2
 8001096:	4698      	mov	r8, r3
 8001098:	688a      	ldr	r2, [r1, #8]
 800109a:	690b      	ldr	r3, [r1, #16]
 800109c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80010a0:	4293      	cmp	r3, r2
 80010a2:	bfb8      	it	lt
 80010a4:	4613      	movlt	r3, r2
 80010a6:	6033      	str	r3, [r6, #0]
 80010a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80010ac:	4607      	mov	r7, r0
 80010ae:	460c      	mov	r4, r1
 80010b0:	b10a      	cbz	r2, 80010b6 <_printf_common+0x26>
 80010b2:	3301      	adds	r3, #1
 80010b4:	6033      	str	r3, [r6, #0]
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	0699      	lsls	r1, r3, #26
 80010ba:	bf42      	ittt	mi
 80010bc:	6833      	ldrmi	r3, [r6, #0]
 80010be:	3302      	addmi	r3, #2
 80010c0:	6033      	strmi	r3, [r6, #0]
 80010c2:	6825      	ldr	r5, [r4, #0]
 80010c4:	f015 0506 	ands.w	r5, r5, #6
 80010c8:	d106      	bne.n	80010d8 <_printf_common+0x48>
 80010ca:	f104 0a19 	add.w	sl, r4, #25
 80010ce:	68e3      	ldr	r3, [r4, #12]
 80010d0:	6832      	ldr	r2, [r6, #0]
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	42ab      	cmp	r3, r5
 80010d6:	dc26      	bgt.n	8001126 <_printf_common+0x96>
 80010d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80010dc:	6822      	ldr	r2, [r4, #0]
 80010de:	3b00      	subs	r3, #0
 80010e0:	bf18      	it	ne
 80010e2:	2301      	movne	r3, #1
 80010e4:	0692      	lsls	r2, r2, #26
 80010e6:	d42b      	bmi.n	8001140 <_printf_common+0xb0>
 80010e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80010ec:	4641      	mov	r1, r8
 80010ee:	4638      	mov	r0, r7
 80010f0:	47c8      	blx	r9
 80010f2:	3001      	adds	r0, #1
 80010f4:	d01e      	beq.n	8001134 <_printf_common+0xa4>
 80010f6:	6823      	ldr	r3, [r4, #0]
 80010f8:	6922      	ldr	r2, [r4, #16]
 80010fa:	f003 0306 	and.w	r3, r3, #6
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf02      	ittt	eq
 8001102:	68e5      	ldreq	r5, [r4, #12]
 8001104:	6833      	ldreq	r3, [r6, #0]
 8001106:	1aed      	subeq	r5, r5, r3
 8001108:	68a3      	ldr	r3, [r4, #8]
 800110a:	bf0c      	ite	eq
 800110c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001110:	2500      	movne	r5, #0
 8001112:	4293      	cmp	r3, r2
 8001114:	bfc4      	itt	gt
 8001116:	1a9b      	subgt	r3, r3, r2
 8001118:	18ed      	addgt	r5, r5, r3
 800111a:	2600      	movs	r6, #0
 800111c:	341a      	adds	r4, #26
 800111e:	42b5      	cmp	r5, r6
 8001120:	d11a      	bne.n	8001158 <_printf_common+0xc8>
 8001122:	2000      	movs	r0, #0
 8001124:	e008      	b.n	8001138 <_printf_common+0xa8>
 8001126:	2301      	movs	r3, #1
 8001128:	4652      	mov	r2, sl
 800112a:	4641      	mov	r1, r8
 800112c:	4638      	mov	r0, r7
 800112e:	47c8      	blx	r9
 8001130:	3001      	adds	r0, #1
 8001132:	d103      	bne.n	800113c <_printf_common+0xac>
 8001134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113c:	3501      	adds	r5, #1
 800113e:	e7c6      	b.n	80010ce <_printf_common+0x3e>
 8001140:	18e1      	adds	r1, r4, r3
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	2030      	movs	r0, #48	@ 0x30
 8001146:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800114a:	4422      	add	r2, r4
 800114c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001150:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001154:	3302      	adds	r3, #2
 8001156:	e7c7      	b.n	80010e8 <_printf_common+0x58>
 8001158:	2301      	movs	r3, #1
 800115a:	4622      	mov	r2, r4
 800115c:	4641      	mov	r1, r8
 800115e:	4638      	mov	r0, r7
 8001160:	47c8      	blx	r9
 8001162:	3001      	adds	r0, #1
 8001164:	d0e6      	beq.n	8001134 <_printf_common+0xa4>
 8001166:	3601      	adds	r6, #1
 8001168:	e7d9      	b.n	800111e <_printf_common+0x8e>
	...

0800116c <_printf_i>:
 800116c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001170:	7e0f      	ldrb	r7, [r1, #24]
 8001172:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001174:	2f78      	cmp	r7, #120	@ 0x78
 8001176:	4691      	mov	r9, r2
 8001178:	4680      	mov	r8, r0
 800117a:	460c      	mov	r4, r1
 800117c:	469a      	mov	sl, r3
 800117e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001182:	d807      	bhi.n	8001194 <_printf_i+0x28>
 8001184:	2f62      	cmp	r7, #98	@ 0x62
 8001186:	d80a      	bhi.n	800119e <_printf_i+0x32>
 8001188:	2f00      	cmp	r7, #0
 800118a:	f000 80d2 	beq.w	8001332 <_printf_i+0x1c6>
 800118e:	2f58      	cmp	r7, #88	@ 0x58
 8001190:	f000 80b9 	beq.w	8001306 <_printf_i+0x19a>
 8001194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001198:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800119c:	e03a      	b.n	8001214 <_printf_i+0xa8>
 800119e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80011a2:	2b15      	cmp	r3, #21
 80011a4:	d8f6      	bhi.n	8001194 <_printf_i+0x28>
 80011a6:	a101      	add	r1, pc, #4	@ (adr r1, 80011ac <_printf_i+0x40>)
 80011a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80011ac:	08001205 	.word	0x08001205
 80011b0:	08001219 	.word	0x08001219
 80011b4:	08001195 	.word	0x08001195
 80011b8:	08001195 	.word	0x08001195
 80011bc:	08001195 	.word	0x08001195
 80011c0:	08001195 	.word	0x08001195
 80011c4:	08001219 	.word	0x08001219
 80011c8:	08001195 	.word	0x08001195
 80011cc:	08001195 	.word	0x08001195
 80011d0:	08001195 	.word	0x08001195
 80011d4:	08001195 	.word	0x08001195
 80011d8:	08001319 	.word	0x08001319
 80011dc:	08001243 	.word	0x08001243
 80011e0:	080012d3 	.word	0x080012d3
 80011e4:	08001195 	.word	0x08001195
 80011e8:	08001195 	.word	0x08001195
 80011ec:	0800133b 	.word	0x0800133b
 80011f0:	08001195 	.word	0x08001195
 80011f4:	08001243 	.word	0x08001243
 80011f8:	08001195 	.word	0x08001195
 80011fc:	08001195 	.word	0x08001195
 8001200:	080012db 	.word	0x080012db
 8001204:	6833      	ldr	r3, [r6, #0]
 8001206:	1d1a      	adds	r2, r3, #4
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6032      	str	r2, [r6, #0]
 800120c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001210:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001214:	2301      	movs	r3, #1
 8001216:	e09d      	b.n	8001354 <_printf_i+0x1e8>
 8001218:	6833      	ldr	r3, [r6, #0]
 800121a:	6820      	ldr	r0, [r4, #0]
 800121c:	1d19      	adds	r1, r3, #4
 800121e:	6031      	str	r1, [r6, #0]
 8001220:	0606      	lsls	r6, r0, #24
 8001222:	d501      	bpl.n	8001228 <_printf_i+0xbc>
 8001224:	681d      	ldr	r5, [r3, #0]
 8001226:	e003      	b.n	8001230 <_printf_i+0xc4>
 8001228:	0645      	lsls	r5, r0, #25
 800122a:	d5fb      	bpl.n	8001224 <_printf_i+0xb8>
 800122c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001230:	2d00      	cmp	r5, #0
 8001232:	da03      	bge.n	800123c <_printf_i+0xd0>
 8001234:	232d      	movs	r3, #45	@ 0x2d
 8001236:	426d      	negs	r5, r5
 8001238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800123c:	4859      	ldr	r0, [pc, #356]	@ (80013a4 <_printf_i+0x238>)
 800123e:	230a      	movs	r3, #10
 8001240:	e011      	b.n	8001266 <_printf_i+0xfa>
 8001242:	6821      	ldr	r1, [r4, #0]
 8001244:	6833      	ldr	r3, [r6, #0]
 8001246:	0608      	lsls	r0, r1, #24
 8001248:	f853 5b04 	ldr.w	r5, [r3], #4
 800124c:	d402      	bmi.n	8001254 <_printf_i+0xe8>
 800124e:	0649      	lsls	r1, r1, #25
 8001250:	bf48      	it	mi
 8001252:	b2ad      	uxthmi	r5, r5
 8001254:	2f6f      	cmp	r7, #111	@ 0x6f
 8001256:	4853      	ldr	r0, [pc, #332]	@ (80013a4 <_printf_i+0x238>)
 8001258:	6033      	str	r3, [r6, #0]
 800125a:	bf14      	ite	ne
 800125c:	230a      	movne	r3, #10
 800125e:	2308      	moveq	r3, #8
 8001260:	2100      	movs	r1, #0
 8001262:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001266:	6866      	ldr	r6, [r4, #4]
 8001268:	60a6      	str	r6, [r4, #8]
 800126a:	2e00      	cmp	r6, #0
 800126c:	bfa2      	ittt	ge
 800126e:	6821      	ldrge	r1, [r4, #0]
 8001270:	f021 0104 	bicge.w	r1, r1, #4
 8001274:	6021      	strge	r1, [r4, #0]
 8001276:	b90d      	cbnz	r5, 800127c <_printf_i+0x110>
 8001278:	2e00      	cmp	r6, #0
 800127a:	d04b      	beq.n	8001314 <_printf_i+0x1a8>
 800127c:	4616      	mov	r6, r2
 800127e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001282:	fb03 5711 	mls	r7, r3, r1, r5
 8001286:	5dc7      	ldrb	r7, [r0, r7]
 8001288:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800128c:	462f      	mov	r7, r5
 800128e:	42bb      	cmp	r3, r7
 8001290:	460d      	mov	r5, r1
 8001292:	d9f4      	bls.n	800127e <_printf_i+0x112>
 8001294:	2b08      	cmp	r3, #8
 8001296:	d10b      	bne.n	80012b0 <_printf_i+0x144>
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	07df      	lsls	r7, r3, #31
 800129c:	d508      	bpl.n	80012b0 <_printf_i+0x144>
 800129e:	6923      	ldr	r3, [r4, #16]
 80012a0:	6861      	ldr	r1, [r4, #4]
 80012a2:	4299      	cmp	r1, r3
 80012a4:	bfde      	ittt	le
 80012a6:	2330      	movle	r3, #48	@ 0x30
 80012a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80012ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80012b0:	1b92      	subs	r2, r2, r6
 80012b2:	6122      	str	r2, [r4, #16]
 80012b4:	f8cd a000 	str.w	sl, [sp]
 80012b8:	464b      	mov	r3, r9
 80012ba:	aa03      	add	r2, sp, #12
 80012bc:	4621      	mov	r1, r4
 80012be:	4640      	mov	r0, r8
 80012c0:	f7ff fee6 	bl	8001090 <_printf_common>
 80012c4:	3001      	adds	r0, #1
 80012c6:	d14a      	bne.n	800135e <_printf_i+0x1f2>
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012cc:	b004      	add	sp, #16
 80012ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	f043 0320 	orr.w	r3, r3, #32
 80012d8:	6023      	str	r3, [r4, #0]
 80012da:	4833      	ldr	r0, [pc, #204]	@ (80013a8 <_printf_i+0x23c>)
 80012dc:	2778      	movs	r7, #120	@ 0x78
 80012de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	6831      	ldr	r1, [r6, #0]
 80012e6:	061f      	lsls	r7, r3, #24
 80012e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80012ec:	d402      	bmi.n	80012f4 <_printf_i+0x188>
 80012ee:	065f      	lsls	r7, r3, #25
 80012f0:	bf48      	it	mi
 80012f2:	b2ad      	uxthmi	r5, r5
 80012f4:	6031      	str	r1, [r6, #0]
 80012f6:	07d9      	lsls	r1, r3, #31
 80012f8:	bf44      	itt	mi
 80012fa:	f043 0320 	orrmi.w	r3, r3, #32
 80012fe:	6023      	strmi	r3, [r4, #0]
 8001300:	b11d      	cbz	r5, 800130a <_printf_i+0x19e>
 8001302:	2310      	movs	r3, #16
 8001304:	e7ac      	b.n	8001260 <_printf_i+0xf4>
 8001306:	4827      	ldr	r0, [pc, #156]	@ (80013a4 <_printf_i+0x238>)
 8001308:	e7e9      	b.n	80012de <_printf_i+0x172>
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	f023 0320 	bic.w	r3, r3, #32
 8001310:	6023      	str	r3, [r4, #0]
 8001312:	e7f6      	b.n	8001302 <_printf_i+0x196>
 8001314:	4616      	mov	r6, r2
 8001316:	e7bd      	b.n	8001294 <_printf_i+0x128>
 8001318:	6833      	ldr	r3, [r6, #0]
 800131a:	6825      	ldr	r5, [r4, #0]
 800131c:	6961      	ldr	r1, [r4, #20]
 800131e:	1d18      	adds	r0, r3, #4
 8001320:	6030      	str	r0, [r6, #0]
 8001322:	062e      	lsls	r6, r5, #24
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	d501      	bpl.n	800132c <_printf_i+0x1c0>
 8001328:	6019      	str	r1, [r3, #0]
 800132a:	e002      	b.n	8001332 <_printf_i+0x1c6>
 800132c:	0668      	lsls	r0, r5, #25
 800132e:	d5fb      	bpl.n	8001328 <_printf_i+0x1bc>
 8001330:	8019      	strh	r1, [r3, #0]
 8001332:	2300      	movs	r3, #0
 8001334:	6123      	str	r3, [r4, #16]
 8001336:	4616      	mov	r6, r2
 8001338:	e7bc      	b.n	80012b4 <_printf_i+0x148>
 800133a:	6833      	ldr	r3, [r6, #0]
 800133c:	1d1a      	adds	r2, r3, #4
 800133e:	6032      	str	r2, [r6, #0]
 8001340:	681e      	ldr	r6, [r3, #0]
 8001342:	6862      	ldr	r2, [r4, #4]
 8001344:	2100      	movs	r1, #0
 8001346:	4630      	mov	r0, r6
 8001348:	f7fe ff42 	bl	80001d0 <memchr>
 800134c:	b108      	cbz	r0, 8001352 <_printf_i+0x1e6>
 800134e:	1b80      	subs	r0, r0, r6
 8001350:	6060      	str	r0, [r4, #4]
 8001352:	6863      	ldr	r3, [r4, #4]
 8001354:	6123      	str	r3, [r4, #16]
 8001356:	2300      	movs	r3, #0
 8001358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800135c:	e7aa      	b.n	80012b4 <_printf_i+0x148>
 800135e:	6923      	ldr	r3, [r4, #16]
 8001360:	4632      	mov	r2, r6
 8001362:	4649      	mov	r1, r9
 8001364:	4640      	mov	r0, r8
 8001366:	47d0      	blx	sl
 8001368:	3001      	adds	r0, #1
 800136a:	d0ad      	beq.n	80012c8 <_printf_i+0x15c>
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	079b      	lsls	r3, r3, #30
 8001370:	d413      	bmi.n	800139a <_printf_i+0x22e>
 8001372:	68e0      	ldr	r0, [r4, #12]
 8001374:	9b03      	ldr	r3, [sp, #12]
 8001376:	4298      	cmp	r0, r3
 8001378:	bfb8      	it	lt
 800137a:	4618      	movlt	r0, r3
 800137c:	e7a6      	b.n	80012cc <_printf_i+0x160>
 800137e:	2301      	movs	r3, #1
 8001380:	4632      	mov	r2, r6
 8001382:	4649      	mov	r1, r9
 8001384:	4640      	mov	r0, r8
 8001386:	47d0      	blx	sl
 8001388:	3001      	adds	r0, #1
 800138a:	d09d      	beq.n	80012c8 <_printf_i+0x15c>
 800138c:	3501      	adds	r5, #1
 800138e:	68e3      	ldr	r3, [r4, #12]
 8001390:	9903      	ldr	r1, [sp, #12]
 8001392:	1a5b      	subs	r3, r3, r1
 8001394:	42ab      	cmp	r3, r5
 8001396:	dcf2      	bgt.n	800137e <_printf_i+0x212>
 8001398:	e7eb      	b.n	8001372 <_printf_i+0x206>
 800139a:	2500      	movs	r5, #0
 800139c:	f104 0619 	add.w	r6, r4, #25
 80013a0:	e7f5      	b.n	800138e <_printf_i+0x222>
 80013a2:	bf00      	nop
 80013a4:	080014c2 	.word	0x080014c2
 80013a8:	080014d3 	.word	0x080014d3

080013ac <memmove>:
 80013ac:	4288      	cmp	r0, r1
 80013ae:	b510      	push	{r4, lr}
 80013b0:	eb01 0402 	add.w	r4, r1, r2
 80013b4:	d902      	bls.n	80013bc <memmove+0x10>
 80013b6:	4284      	cmp	r4, r0
 80013b8:	4623      	mov	r3, r4
 80013ba:	d807      	bhi.n	80013cc <memmove+0x20>
 80013bc:	1e43      	subs	r3, r0, #1
 80013be:	42a1      	cmp	r1, r4
 80013c0:	d008      	beq.n	80013d4 <memmove+0x28>
 80013c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80013c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80013ca:	e7f8      	b.n	80013be <memmove+0x12>
 80013cc:	4402      	add	r2, r0
 80013ce:	4601      	mov	r1, r0
 80013d0:	428a      	cmp	r2, r1
 80013d2:	d100      	bne.n	80013d6 <memmove+0x2a>
 80013d4:	bd10      	pop	{r4, pc}
 80013d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80013da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80013de:	e7f7      	b.n	80013d0 <memmove+0x24>

080013e0 <_sbrk_r>:
 80013e0:	b538      	push	{r3, r4, r5, lr}
 80013e2:	4d06      	ldr	r5, [pc, #24]	@ (80013fc <_sbrk_r+0x1c>)
 80013e4:	2300      	movs	r3, #0
 80013e6:	4604      	mov	r4, r0
 80013e8:	4608      	mov	r0, r1
 80013ea:	602b      	str	r3, [r5, #0]
 80013ec:	f7ff fb1e 	bl	8000a2c <_sbrk>
 80013f0:	1c43      	adds	r3, r0, #1
 80013f2:	d102      	bne.n	80013fa <_sbrk_r+0x1a>
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	b103      	cbz	r3, 80013fa <_sbrk_r+0x1a>
 80013f8:	6023      	str	r3, [r4, #0]
 80013fa:	bd38      	pop	{r3, r4, r5, pc}
 80013fc:	200001ac 	.word	0x200001ac

08001400 <memcpy>:
 8001400:	440a      	add	r2, r1
 8001402:	4291      	cmp	r1, r2
 8001404:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001408:	d100      	bne.n	800140c <memcpy+0xc>
 800140a:	4770      	bx	lr
 800140c:	b510      	push	{r4, lr}
 800140e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001416:	4291      	cmp	r1, r2
 8001418:	d1f9      	bne.n	800140e <memcpy+0xe>
 800141a:	bd10      	pop	{r4, pc}

0800141c <_realloc_r>:
 800141c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001420:	4680      	mov	r8, r0
 8001422:	4615      	mov	r5, r2
 8001424:	460c      	mov	r4, r1
 8001426:	b921      	cbnz	r1, 8001432 <_realloc_r+0x16>
 8001428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800142c:	4611      	mov	r1, r2
 800142e:	f7ff bc4b 	b.w	8000cc8 <_malloc_r>
 8001432:	b92a      	cbnz	r2, 8001440 <_realloc_r+0x24>
 8001434:	f7ff fbdc 	bl	8000bf0 <_free_r>
 8001438:	2400      	movs	r4, #0
 800143a:	4620      	mov	r0, r4
 800143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001440:	f000 f81a 	bl	8001478 <_malloc_usable_size_r>
 8001444:	4285      	cmp	r5, r0
 8001446:	4606      	mov	r6, r0
 8001448:	d802      	bhi.n	8001450 <_realloc_r+0x34>
 800144a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800144e:	d8f4      	bhi.n	800143a <_realloc_r+0x1e>
 8001450:	4629      	mov	r1, r5
 8001452:	4640      	mov	r0, r8
 8001454:	f7ff fc38 	bl	8000cc8 <_malloc_r>
 8001458:	4607      	mov	r7, r0
 800145a:	2800      	cmp	r0, #0
 800145c:	d0ec      	beq.n	8001438 <_realloc_r+0x1c>
 800145e:	42b5      	cmp	r5, r6
 8001460:	462a      	mov	r2, r5
 8001462:	4621      	mov	r1, r4
 8001464:	bf28      	it	cs
 8001466:	4632      	movcs	r2, r6
 8001468:	f7ff ffca 	bl	8001400 <memcpy>
 800146c:	4621      	mov	r1, r4
 800146e:	4640      	mov	r0, r8
 8001470:	f7ff fbbe 	bl	8000bf0 <_free_r>
 8001474:	463c      	mov	r4, r7
 8001476:	e7e0      	b.n	800143a <_realloc_r+0x1e>

08001478 <_malloc_usable_size_r>:
 8001478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800147c:	1f18      	subs	r0, r3, #4
 800147e:	2b00      	cmp	r3, #0
 8001480:	bfbc      	itt	lt
 8001482:	580b      	ldrlt	r3, [r1, r0]
 8001484:	18c0      	addlt	r0, r0, r3
 8001486:	4770      	bx	lr

08001488 <_init>:
 8001488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800148a:	bf00      	nop
 800148c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800148e:	bc08      	pop	{r3}
 8001490:	469e      	mov	lr, r3
 8001492:	4770      	bx	lr

08001494 <_fini>:
 8001494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001496:	bf00      	nop
 8001498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800149a:	bc08      	pop	{r3}
 800149c:	469e      	mov	lr, r3
 800149e:	4770      	bx	lr
